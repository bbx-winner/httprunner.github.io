












[{"body":"Welcome to the HttpRunner documentation! This guide helps you to understand the key points of HttpRunner and get started quickly.\nSubscribe ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","categories":"","description":"","excerpt":"Welcome to the HttpRunner documentation! This guide helps you to understand the key points of HttpRunner and get started quickly.\nSubscribe ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","ref":"/docs/","tags":"","title":"Welcome to HttpRunner+"},{"body":"    \nhrp is a golang implementation of [HttpRunner]. Ideally, hrp will be fully compatible with HttpRunner, including testcase format and usage. What‚Äôs more, hrp will integrate Boomer natively to be a better load generator for [locust].\nKey Features  Full support for HTTP(S) requests, more protocols are also in the plan. Testcases can be described in multiple formats, YAML/JSON/Golang, and they are interchangeable. With [HAR][HAR] support, you can use Charles/Fiddler/Chrome/etc as a script recording generator. Supports variables/extract/validate/hooks mechanisms to create extremely complex test scenarios. Built-in integration of rich functions, and you can also use [go plugin][plugin] to create and call custom functions. Inherit all powerful features of [Boomer][Boomer] and [locust][locust], you can run load test without extra work. Use it as a CLI tool or as a library are both supported.  Quick Start use as CLI tool $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands.\n$ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ‚ú® üöÄ ‚ú® License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. You can use hrp run command to run HttpRunner JSON/YAML testcases. The following is an example running [examples/demo.json][demo.json]\n $ hrp run examples/demo.json 8:04PM INF Set log to pretty console 8:04PM INF Set log level to INFO 8:04PM INF [init] SetDebug debug=true 8:04PM INF load json testcase path=/Users/debugtalk/MyProjects/HttpRunner-dev/hrp/examples/demo.json 8:04PM INF call function success arguments=[5] funcName=gen_random_string output=B64R8 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 8:04PM INF run testcase start testcase=\"demo with complex mechanisms\" 8:04PM INF call function success arguments=[12.3,34.5] funcName=max output=34.5 8:04PM INF run step start step=\"get with params\" -------------------- request -------------------- GET /get?foo1=B64R8\u0026foo2=34.5 HTTP/1.1 Host: postman-echo.com User-Agent: HttpRunnerPlus ==================== response =================== HTTP/1.1 200 OK Content-Length: 304 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"130-LUQ0LVU7KVSZha0O3nQxqPlr5dw\" Set-Cookie: sails.sid=s%3Ag6vZXrHHzs-B7Q1bFrYQq83dUje_EkSu.06vsqbkZvIOJ6mb1It7c6i354e%2B0t91K4cG14YFjSX0; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{\"foo1\":\"B64R8\",\"foo2\":\"34.5\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-7516144f65e561a8238adab5\",\"user-agent\":\"HttpRunnerPlus\",\"accept-encoding\":\"gzip\"},\"url\":\"https://postman-echo.com/get?foo1=B64R8\u0026foo2=34.5\"} -------------------------------------------------- 8:04PM INF extract value from=body.args.foo1 value=B64R8 8:04PM INF set variable value=B64R8 variable=varFoo1 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate headers.\"Content-Type\" assertMethod=startswith checkValue=\"application/json; charset=utf-8\" expectValue=application/json result=true 8:04PM INF validate body.args.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate $varFoo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.args.foo2 assertMethod=equals checkValue=34.5 expectValue=34.5 result=true 8:04PM INF run step end exportVars={\"varFoo1\":\"B64R8\"} step=\"get with params\" success=true 8:04PM INF run step start step=\"post json data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/json; charset=UTF-8 {\"foo1\":\"B64R8\",\"foo2\":12.3} ==================== response =================== HTTP/1.1 200 OK Content-Length: 424 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1a8-1umvYElau4WkHR7VON+jKXozT2c\" Set-Cookie: sails.sid=s%3AeNnS5IE6TBePzx95OfuwyIweJy5aExb0.7MH6Vb42vbZ6OhNT2nhQGcAmHgqcFmtM8X03Qsoxa1k; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"files\":{},\"form\":{},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-360475ad34903a97191978d7\",\"content-length\":\"28\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/json; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.json.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.json.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post json data\" success=true 8:04PM INF run step start step=\"post form data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/x-www-form-urlencoded; charset=UTF-8 foo1=B64R8\u0026foo2=12.3 ==================== response =================== HTTP/1.1 200 OK Content-Length: 445 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1bd-g/z+op+J2/U1DlrEv2g2VhZ0on4\" Set-Cookie: sails.sid=s%3ALfq9XEgKVT4dKQ8PnxUJ9-WSq4wI96Po.2P90TP9V2Pje3GNJ1hJmLcRRgcQy%2FDwBPF63Xdvdq4o; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-56d250242bf05b7144edf2cb\",\"content-length\":\"20\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/x-www-form-urlencoded; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.form.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.form.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post form data\" success=true 8:04PM INF run testcase end testcase=\"demo with complex mechanisms\"  use as library Beside using hrp as a CLI tool, you can also use it as golang library.\n$ go get -u github.com/httprunner/hrp This is an example of HttpRunner+ testcase. You can find more in the [examples][examples] directory.\n demo import ( \"testing\" \"github.com/httprunner/hrp\" ) func TestCaseDemo(t *testing.T) { demoTestCase := \u0026hrp.TestCase{ Config: hrp.TConfig{ Name: \"demo with complex mechanisms\", BaseURL: \"https://postman-echo.com\", Variables: map[string]interface{}{ // global level variables  \"n\": 5, \"a\": 12.3, \"b\": 3.45, \"varFoo1\": \"${gen_random_string($n)}\", \"varFoo2\": \"${max($a, $b)}\", // 12.3; eval with built-in function  }, }, TestSteps: []hrp.IStep{ hrp.Step(\"get with params\"). WithVariables(map[string]interface{}{ // step level variables  \"n\": 3, // inherit config level variables if not set in step level, a/varFoo1  \"b\": 34.5, // override config level variable if existed, n/b/varFoo2  \"varFoo2\": \"${max($a, $b)}\", // 34.5; override variable b and eval again  }). GET(\"/get\"). WithParams(map[string]interface{}{\"foo1\": \"$varFoo1\", \"foo2\": \"$varFoo2\"}). // request with params  WithHeaders(map[string]string{\"User-Agent\": \"HttpRunnerPlus\"}). // request with headers  Extract(). WithJmesPath(\"body.args.foo1\", \"varFoo1\"). // extract variable with jmespath  Validate(). AssertEqual(\"status_code\", 200, \"check response status code\"). // validate response status code  AssertStartsWith(\"headers.\\\"Content-Type\\\"\", \"application/json\", \"\"). // validate response header  AssertLengthEqual(\"body.args.foo1\", 5, \"check args foo1\"). // validate response body with jmespath  AssertLengthEqual(\"$varFoo1\", 5, \"check args foo1\"). // assert with extracted variable from current step  AssertEqual(\"body.args.foo2\", \"34.5\", \"check args foo2\"), // notice: request params value will be converted to string  hrp.Step(\"post json data\"). POST(\"/post\"). WithBody(map[string]interface{}{ \"foo1\": \"$varFoo1\", // reference former extracted variable  \"foo2\": \"${max($a, $b)}\", // 12.3; step level variables are independent, variable b is 3.45 here  }). Validate(). AssertEqual(\"status_code\", 200, \"check status code\"). AssertLengthEqual(\"body.json.foo1\", 5, \"check args foo1\"). AssertEqual(\"body.json.foo2\", 12.3, \"check args foo2\"), hrp.Step(\"post form data\"). POST(\"/post\"). WithHeaders(map[string]string{\"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"}). WithBody(map[string]interface{}{ \"foo1\": \"$varFoo1\", // reference former extracted variable  \"foo2\": \"${max($a, $b)}\", // 12.3; step level variables are independent, variable b is 3.45 here  }). Validate(). AssertEqual(\"status_code\", 200, \"check status code\"). AssertLengthEqual(\"body.form.foo1\", 5, \"check args foo1\"). AssertEqual(\"body.form.foo2\", \"12.3\", \"check args foo2\"), // form data will be converted to string  }, } err := hrp.NewRunner(nil).Run(demoTestCase) // hrp.Run(demoTestCase)  if err != nil { t.Fatalf(\"run testcase error: %v\", err) } }  The Overview is where your users find out about your project. Depending on the size of your docset, you can have a separate overview page (like this one) or put your overview contents in the Documentation landing page (like in the Docsy User Guide).\nTry answering these questions for your user in this page:\nWhat is HttpRunner?  Introduce your project, including what it does or lets you do, why you would use it, and its primary goal (and how it achieves it). This should be similar to your README description, though you can go into a little more detail here if you want.\n Why do I want it? Help your user know if your project will help them. Useful information can include:\n  What is it good for?: What types of problems does your project solve? What are the benefits of using it?\n  What is it not good for?: For example, point out situations that might intuitively seem suited for your project, but aren‚Äôt for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them.\n  What is it not yet good for?: Highlight any useful features that are coming soon.\n  Where should I go next? Give your users next steps from the Overview. For example:\n Getting Started: Get started with $project Examples: Check out some example code!  ","categories":"","description":"Including key features,","excerpt":"Including key features,","ref":"/docs/overview/","tags":"","title":"Overview"},{"body":"HttpRunner+ is developed with Golang, it supports Go 1.13+ and most operating systems. Combination of Go 1.13/1.14/1.15/1.16/1.17 and macOS/Linux/Windows are tested continuously on GitHub-Actions.\ninstall as CLI tool $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands.\n$ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ‚ú® üöÄ ‚ú® License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. install as library Beside using hrp as a CLI tool, you can also use it as golang library.\n$ go get -u github.com/httprunner/hrp Then you can import github.com/httprunner/hrp and write testcases in Golang.\n","categories":"","description":"How to install HttpRunner.","excerpt":"How to install HttpRunner.","ref":"/docs/installation/","tags":"","title":"Installation"},{"body":"Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory ‚ÄúHello World‚Äù example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":"","description":"What does your user need to know to try your project?\n","excerpt":"What does your user need to know to try your project?\n","ref":"/docs/quickstart/","tags":"","title":"Getting Started"},{"body":"TestCase TestStep TestSuite functions \"${func{$a, $b}}\" variables $abc or ${abc}\nextract validate ","categories":"","description":"The key concepts for HttpRunner.","excerpt":"The key concepts for HttpRunner.","ref":"/docs/concepts/","tags":"","title":"Concepts"},{"body":" This is a placeholder page that shows you how to use this template site.\n Do you have any example applications or code for your users in your repo or elsewhere? Link to your examples here.\n","categories":"","description":"See your project in action!\n","excerpt":"See your project in action!\n","ref":"/docs/examples/","tags":"","title":"Examples"},{"body":"Technical training Technical support Privatization deployment Customized development ","categories":"","description":"You can also get commercial support when you need it.","excerpt":"You can also get commercial support when you need it.","ref":"/docs/services/","tags":"","title":"Services"},{"body":" These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files are stored in GitHub. You can use the guidelines ‚Äúas is‚Äù or adapt them with your own instructions: for example, other deployment options, information about your doc project‚Äôs file structure, project-specific review guidelines, versioning guidelines, or any other information your users might find useful when updating your site. Kubeflow has a great example.\nDon‚Äôt forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here‚Äôs a quick guide to updating the docs. It assumes you‚Äôre familiar with the GitHub workflow and you‚Äôre happy to use the automated preview of your doc updates:\n Fork the Goldydocs repo on GitHub. Make your changes and send a pull request (PR). If you‚Äôre not yet ready for a review, add ‚ÄúWIP‚Äù to the PR name to indicate it‚Äôs a work in progress. (Don‚Äôt add the Hugo property ‚Äúdraft = true‚Äù to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it‚Äôs ready, you should see a comment like this: deploy/netlify ‚Äî Deploy preview ready! Click Details to the right of ‚ÄúDeploy preview ready‚Äù to see a preview of your updates. Continue updating your doc and pushing your changes until you‚Äôre happy with the content. When you‚Äôre ready for a review, add a comment to the PR, and remove any ‚ÄúWIP‚Äù markers.  Updating a single page If you‚Äôve just spotted something you‚Äôd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don‚Äôt already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You‚Äôll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Goldydocs repo repo into your own project, then create a local copy using git clone. Don‚Äôt forget to use --recurse-submodules or you won‚Äôt pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you‚Äôre serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you‚Äôve found a problem in the docs, but you‚Äôre not sure how to fix it yourself, please create an issue in the Goldydocs repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","categories":"","description":"How to contribute to the docs\n","excerpt":"How to contribute to the docs\n","ref":"/docs/contribution/","tags":"","title":"Contribution Guidelines"},{"body":"Gold Sponsor \n ÈúçÊ†ºÊ≤ÉÂÖπÊµãËØïÂºÄÂèëÂ≠¶Á§æÊòØ‰∏öÁïåÈ¢ÜÂÖàÁöÑÊµãËØïÂºÄÂèëÊäÄÊúØÈ´òÁ´ØÊïôËÇ≤ÂìÅÁâåÔºåÈö∂Â±û‰∫éÊµãÂêßÔºàÂåó‰∫¨ÔºâÁßëÊäÄÊúâÈôêÂÖ¨Âè∏ „ÄÇÂ≠¶Èô¢ËØæÁ®ãÁî±‰∏ÄÁ∫øÂ§ßÂéÇÊµãËØïÁªèÁêÜ‰∏éËµÑÊ∑±ÊµãËØïÂºÄÂèë‰∏ìÂÆ∂ÂèÇ‰∏éÁ†îÂèëÔºåÂÆûÊàòÈ©±Âä®„ÄÇËØæÁ®ãÊ∂µÁõñ web/app Ëá™Âä®ÂåñÊµãËØï„ÄÅÊé•Âè£ÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÂÆâÂÖ®ÊµãËØï„ÄÅÊåÅÁª≠ÈõÜÊàê/ÊåÅÁª≠‰∫§‰ªò/DevOpsÔºåÊµãËØïÂ∑¶Áßª\u0026Âè≥Áßª„ÄÅÁ≤æÂáÜÊµãËØï„ÄÅÊµãËØïÂπ≥Âè∞ÂºÄÂèë„ÄÅÊµãËØïÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåÂ∏ÆÂä©ÊµãËØïÂ∑•Á®ãÂ∏àÂÆûÁé∞ÊµãËØïÂºÄÂèëÊäÄÊúØËΩ¨Âûã„ÄÇÈÄöËøá‰ºòÁßÄÁöÑÂ≠¶Á§æÂà∂Â∫¶ÔºàÂ•ñÂ≠¶Èáë„ÄÅÂÜÖÊé®ËøîÂ≠¶Ë¥π„ÄÅË°å‰∏öÁ´ûËµõÁ≠âÂ§öÁßçÊñπÂºèÔºâÊù•ÂÆûÁé∞Â≠¶Âëò„ÄÅÂ≠¶Á§æÂèäÁî®‰∫∫‰ºÅ‰∏öÁöÑ‰∏âÊñπÂÖ±Ëµ¢„ÄÇ\n  ËøõÂÖ•ÊµãËØïÂºÄÂèëÊäÄÊúØËÉΩÂäõÊµãËØÑ!\n Open Source Sponsor \nHttpRunner is in Sentry Sponsored plan.\nÊàê‰∏∫ËµûÂä©ÂïÜ Â¶ÇÊûú‰Ω†ÊâÄÂú®ÁöÑÂÖ¨Âè∏Êàñ‰∏™‰∫∫‰πüÊÉ≥ÂØπ HttpRunner ËøõË°åËµûÂä©ÔºåÂèØÂèÇËÄÉÂ¶Ç‰∏ãÊñπÊ°àÔºåÂÖ∑‰ΩìÂèØËÅîÁ≥ªÈ°πÁõÆ‰ΩúËÄÖ„ÄÇ\n   Á≠âÁ∫ß ÈáëÁâåËµûÂä©ÂïÜÔºàGold SponsorÔºâ Èì∂ÁâåËµûÂä©ÂïÜÔºàSilver SponsorÔºâ ‰∏™‰∫∫ËµûËµèÔºàPersonal SponsorÔºâ     ÈáëÈ¢ù Ôø•20000/Âπ¥ Ôø•8000/Âπ¥ Ôø•10+ ‰ªªÊÑè   ÊùÉÁõä ÂÖ¨Âè∏ logoÔºàÂ§ßÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md200 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ÂÖ¨Âè∏ logoÔºà‰∏≠ÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md80 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ‰∏™‰∫∫ ID ÂíåÈìæÊé•Â±ïÁ§∫Âú® sponsors.md    ","categories":"","description":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","excerpt":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","ref":"/docs/sponsors/","tags":"","title":"Sponsors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_1920x1080_fill_q75_catmullrom_top.jpg); } }  One-stop solution for HTTP(S) testing. Getting Started   Download   API test / Load Test / DevOps / APM / DEM\n         Key Features\n      Protocols  Fully support HTTP/1.1 and HTTP/2 requests. TCP, RPC, WebSocket and more protocols are coming soon.\n   Multiple Formats  Write test cases in YAML/JSON/Golang/Python format, and they are interchangeable.\n   Record \u0026 Generate  Generate test cases with HAR, Postman and Swagger. Smart reminder helps you write Golang/Python test cases easily.\n   Complex Scenarios  Supports variables/extract/validate/hooks mechanisms to create extremely complex test scenarios.\n   Load Test  No extra work is required when you want to run load tests. Supports 10,000+ QPS on one single machine, unlimited with distribution mode.\n   CLI / library  Download binary file and use it as a CLI tool. You can also import as a library in your Golang/Python projects.\n   Open Source  Open source under Apache-2.0 license.\n   Plugins  Built-in rich functions, and you can also integrate custom functions with ease.\n   High Scalability  Develop API/Load test service have never been easier.\n     Commercial Support\n      Expert Service  Provide technical training \u0026 supporting.\nRead more ‚Ä¶\n   SaaS  Provide full featured test services built on HttpRunner.\nRead more ‚Ä¶\n   Privatization deployment  Deploy SaaS service in privatization.\nRead more ‚Ä¶\n   Customized development  Develop customized features or plugins for your own needs\n   Global environment  Schedule your test cases to run on 5000+ Android/iOS/Darwin/Linux/Windows edge devices worldwide\nRead more ‚Ä¶\n   Intelligent analysis  Analyze your test results with advanced analysis tools.\nRead more ‚Ä¶\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { ‚Ä¶","ref":"/","tags":"","title":"HttpRunner"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]