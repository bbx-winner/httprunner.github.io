[{"body":"Welcome to the HttpRunner documentation! This guide helps you to understand the key points of HttpRunner and get started quickly.\nSubscribe ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","categories":"","description":"","excerpt":"Welcome to the HttpRunner documentation! This guide helps you to understand the key points of HttpRunner and get started quickly.\nSubscribe ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","ref":"/en/docs/","tags":"","title":"Welcome to HttpRunner+"},{"body":"    \nhrp is a golang implementation of HttpRunner. Ideally, hrp will be fully compatible with HttpRunner, including testcase format and usage. What‚Äôs more, hrp will integrate Boomer natively to be a better load generator for locust.\nKey Features API Testing  Full support for HTTP(S)/1.1 requests. Support more protocols, HTTP/2, WebSocket, TCP, RPC etc. Testcases can be described in multiple formats, YAML/JSON/Golang, and they are interchangeable. Use Charles/Fiddler/Chrome/etc to record HTTP requests and generate testcases from exported HAR. Supports variables/extract/validate/hooks mechanisms to create extremely complex test scenarios. Data driven with parameterize mechanism, supporting sequential/random/unique strategies to select data. Built-in 100+ commonly used functions for ease, including md5sum, max/min, sleep, gen_random_string etc. Create and call custom functions with plugin mechanism, support [hashicorp plugin] and [go plugin]. Generate html reports with rich test results. Using it as a CLI tool or a library are both supported.  Load Testing Base on the API testing testcases, you can run professional load testing without extra work.\n Inherit all powerful features of locust and boomer. Report performance metrics to [prometheus pushgateway][pushgateway]. Use transaction to define a set of end-user actions that represent the real user activities. Use rendezvous points to force Vusers to perform tasks concurrently during test execution. Load testing with specified concurrent users or constant RPS, also supports spawn rate. Support mixed-scenario testing with custom weight. Simulate browser‚Äôs HTTP parallel connections. IP spoofing. Run in distributed mode to generate unlimited RPS.  Digital Experience Monitoring (DEM) You can also monitor online services for digital experience assessments.\n HTTP(S) latency statistics including DNSLookup, TCP connections, SSL handshakes, content transfers, etc. ping indicators including latency, throughput and packets loss. traceroute DNS monitoring  Quick Start use as CLI tool $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands.\n$ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ‚ú® üöÄ ‚ú® License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. You can use hrp run command to run HttpRunner JSON/YAML testcases. The following is an example running examples/demo.json\n $ hrp run examples/demo.json 8:04PM INF Set log to pretty console 8:04PM INF Set log level to INFO 8:04PM INF [init] SetDebug debug=true 8:04PM INF load json testcase path=/Users/debugtalk/MyProjects/HttpRunner-dev/hrp/examples/demo.json 8:04PM INF call function success arguments=[5] funcName=gen_random_string output=B64R8 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 8:04PM INF run testcase start testcase=\"demo with complex mechanisms\" 8:04PM INF call function success arguments=[12.3,34.5] funcName=max output=34.5 8:04PM INF run step start step=\"get with params\" -------------------- request -------------------- GET /get?foo1=B64R8\u0026foo2=34.5 HTTP/1.1 Host: postman-echo.com User-Agent: HttpRunnerPlus ==================== response =================== HTTP/1.1 200 OK Content-Length: 304 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"130-LUQ0LVU7KVSZha0O3nQxqPlr5dw\" Set-Cookie: sails.sid=s%3Ag6vZXrHHzs-B7Q1bFrYQq83dUje_EkSu.06vsqbkZvIOJ6mb1It7c6i354e%2B0t91K4cG14YFjSX0; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{\"foo1\":\"B64R8\",\"foo2\":\"34.5\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-7516144f65e561a8238adab5\",\"user-agent\":\"HttpRunnerPlus\",\"accept-encoding\":\"gzip\"},\"url\":\"https://postman-echo.com/get?foo1=B64R8\u0026foo2=34.5\"} -------------------------------------------------- 8:04PM INF extract value from=body.args.foo1 value=B64R8 8:04PM INF set variable value=B64R8 variable=varFoo1 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate headers.\"Content-Type\" assertMethod=startswith checkValue=\"application/json; charset=utf-8\" expectValue=application/json result=true 8:04PM INF validate body.args.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate $varFoo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.args.foo2 assertMethod=equals checkValue=34.5 expectValue=34.5 result=true 8:04PM INF run step end exportVars={\"varFoo1\":\"B64R8\"} step=\"get with params\" success=true 8:04PM INF run step start step=\"post json data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/json; charset=UTF-8 {\"foo1\":\"B64R8\",\"foo2\":12.3} ==================== response =================== HTTP/1.1 200 OK Content-Length: 424 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1a8-1umvYElau4WkHR7VON+jKXozT2c\" Set-Cookie: sails.sid=s%3AeNnS5IE6TBePzx95OfuwyIweJy5aExb0.7MH6Vb42vbZ6OhNT2nhQGcAmHgqcFmtM8X03Qsoxa1k; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"files\":{},\"form\":{},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-360475ad34903a97191978d7\",\"content-length\":\"28\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/json; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":12.3},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.json.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.json.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post json data\" success=true 8:04PM INF run step start step=\"post form data\" 8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3 -------------------- request -------------------- POST /post HTTP/1.1 Host: postman-echo.com Content-Type: application/x-www-form-urlencoded; charset=UTF-8 foo1=B64R8\u0026foo2=12.3 ==================== response =================== HTTP/1.1 200 OK Content-Length: 445 Connection: keep-alive Content-Type: application/json; charset=utf-8 Date: Thu, 11 Nov 2021 12:04:32 GMT Etag: W/\"1bd-g/z+op+J2/U1DlrEv2g2VhZ0on4\" Set-Cookie: sails.sid=s%3ALfq9XEgKVT4dKQ8PnxUJ9-WSq4wI96Po.2P90TP9V2Pje3GNJ1hJmLcRRgcQy%2FDwBPF63Xdvdq4o; Path=/; HttpOnly Vary: Accept-Encoding {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"headers\":{\"x-forwarded-proto\":\"https\",\"x-forwarded-port\":\"443\",\"host\":\"postman-echo.com\",\"x-amzn-trace-id\":\"Root=1-618d06d0-56d250242bf05b7144edf2cb\",\"content-length\":\"20\",\"user-agent\":\"Go-http-client/1.1\",\"content-type\":\"application/x-www-form-urlencoded; charset=UTF-8\",\"accept-encoding\":\"gzip\"},\"json\":{\"foo1\":\"B64R8\",\"foo2\":\"12.3\"},\"url\":\"https://postman-echo.com/post\"} -------------------------------------------------- 8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true 8:04PM INF validate body.form.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true 8:04PM INF validate body.form.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true 8:04PM INF run step end exportVars=null step=\"post form data\" success=true 8:04PM INF run testcase end testcase=\"demo with complex mechanisms\"  use as library Beside using hrp as a CLI tool, you can also use it as golang library.\n$ go get -u github.com/httprunner/hrp This is an example of HttpRunner+ testcase. You can find more in the examples directory.\n demo import ( \"testing\" \"github.com/httprunner/hrp\" ) func TestCaseDemo(t *testing.T) { demoTestCase := \u0026hrp.TestCase{ Config: hrp.TConfig{ Name: \"demo with complex mechanisms\", BaseURL: \"https://postman-echo.com\", Variables: map[string]interface{}{ // global level variables  \"n\": 5, \"a\": 12.3, \"b\": 3.45, \"varFoo1\": \"${gen_random_string($n)}\", \"varFoo2\": \"${max($a, $b)}\", // 12.3; eval with built-in function  }, }, TestSteps: []hrp.IStep{ hrp.Step(\"get with params\"). WithVariables(map[string]interface{}{ // step level variables  \"n\": 3, // inherit config level variables if not set in step level, a/varFoo1  \"b\": 34.5, // override config level variable if existed, n/b/varFoo2  \"varFoo2\": \"${max($a, $b)}\", // 34.5; override variable b and eval again  }). GET(\"/get\"). WithParams(map[string]interface{}{\"foo1\": \"$varFoo1\", \"foo2\": \"$varFoo2\"}). // request with params  WithHeaders(map[string]string{\"User-Agent\": \"HttpRunnerPlus\"}). // request with headers  Extract(). WithJmesPath(\"body.args.foo1\", \"varFoo1\"). // extract variable with jmespath  Validate(). AssertEqual(\"status_code\", 200, \"check response status code\"). // validate response status code  AssertStartsWith(\"headers.\\\"Content-Type\\\"\", \"application/json\", \"\"). // validate response header  AssertLengthEqual(\"body.args.foo1\", 5, \"check args foo1\"). // validate response body with jmespath  AssertLengthEqual(\"$varFoo1\", 5, \"check args foo1\"). // assert with extracted variable from current step  AssertEqual(\"body.args.foo2\", \"34.5\", \"check args foo2\"), // notice: request params value will be converted to string  hrp.Step(\"post json data\"). POST(\"/post\"). WithBody(map[string]interface{}{ \"foo1\": \"$varFoo1\", // reference former extracted variable  \"foo2\": \"${max($a, $b)}\", // 12.3; step level variables are independent, variable b is 3.45 here  }). Validate(). AssertEqual(\"status_code\", 200, \"check status code\"). AssertLengthEqual(\"body.json.foo1\", 5, \"check args foo1\"). AssertEqual(\"body.json.foo2\", 12.3, \"check args foo2\"), hrp.Step(\"post form data\"). POST(\"/post\"). WithHeaders(map[string]string{\"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"}). WithBody(map[string]interface{}{ \"foo1\": \"$varFoo1\", // reference former extracted variable  \"foo2\": \"${max($a, $b)}\", // 12.3; step level variables are independent, variable b is 3.45 here  }). Validate(). AssertEqual(\"status_code\", 200, \"check status code\"). AssertLengthEqual(\"body.form.foo1\", 5, \"check args foo1\"). AssertEqual(\"body.form.foo2\", \"12.3\", \"check args foo2\"), // form data will be converted to string  }, } err := hrp.NewRunner(nil).Run(demoTestCase) // hrp.Run(demoTestCase)  if err != nil { t.Fatalf(\"run testcase error: %v\", err) } }  ","categories":"","description":"Including key features,","excerpt":"Including key features,","ref":"/en/docs/overview/","tags":"","title":"Overview"},{"body":"‰ªÄ‰πàÊòØÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÔºàDEMÔºâ Âà©‚Ω§ÂàÜÂ∏ÉÂú®ÂÖ®ÁêÉÂêÑÂú∞ÁöÑÁúüÂÆûËÆæÂ§áÂíåÁúüÂÆû‚ΩπÁªúÔºåÊ®°Êãü‚Ω§‚ºæÁöÑÁúüÂÆû‚æè‰∏∫ÔºåÈááÈõÜ‰ΩìÈ™åÁõ∏ÂÖ≥Êï∞ÊçÆÔºåÊèê‰æõ‰ΩìÈ™åÈóÆÈ¢òÂèëÁé∞„ÄÅÊô∫ËÉΩÂΩíÂõ†ÂèäÊä•Ë≠¶ÊúçÂä°„ÄÇ\nÂÖ∑‰ΩìËÉΩ‚ºíÂåÖÊã¨Ôºö\n Êé•‚ºùÊã®Êµã ÊµÅÂ™í‰ΩìÊã®Êµã ‚ΩπÁªúÊã®Êµã H5 Êã®Êµã CDN ÊïàÊûúËØÑÊµã   GartnerÊúâÂÖ≥Êï∞Â≠ó‰ΩìÈ™åÁöÑÈ¢ÑÊµãÔºö\n‚ÄúÂà∞ 2023 Âπ¥Ôºå60% ÁöÑÊï∞Â≠ó‰∏öÂä°ÂàõÊñ∞ÈúÄË¶ÅÈÄöËøáÂü∫Á°ÄËÆæÊñΩÂíåÊô∫ËÉΩËøêÁª¥Êù•Êä•Âëä‚Ω§‚ºæÁöÑÊï∞Â≠ó‰ΩìÈ™åÔºå‚ΩΩ‚Ω¨ÂâçËøôÁßç‰ΩìÈ™åÂú®Âü∫Á°ÄËÆæÊñΩÂíåÊô∫ËÉΩËøêÁª¥‰∏äÁöÑÂÆûÁé∞ÁéáËøò‰∏çÂà∞ 15%„ÄÇ‚Äù\n Ê†∏‚ººÊúçÂä°  ÂÖ®ÁêÉ‰ΩìÈ™åÁõëÊµãÔºöÁúüÂÆûËÆæÂ§áÁúüÂÆû‚ΩπÁªú„ÄÅ‚æÉÂä®Ê®°Êãü‚Ω§‚ºæ‚æè‰∏∫„ÄÅÈááÈõÜ‰ΩìÈ™åÊï∞ÊçÆ„ÄÅÂèëÁé∞‰ΩìÈ™åÈóÆÈ¢ò„ÄÅÊô∫ËÉΩÂΩíÂõ†ÂàÜÊûê ÂÖ®ÁêÉËàÜÊÉÖÁõëÊµãÔºöÊµ∑ÈáèÂ§öËØ≠‚æîÊï∞ÊçÆÊåñÊéò„ÄÅAI+Âú∞ÂüüÂåñËßÑÂàô„ÄÅËàÜÊÉÖÁõëÊµãÂáÜÁ°ÆÂÆûÊó∂ ÂÖ®ÁêÉÁúüÊú∫Áßü‚Ω§ÔºöÂºÄÊîæÂÖ®ÁêÉ 100+ ‚ΩπÁªúËäÇÁÇπ„ÄÅË∂ÖËøá 500 Âè∞‚ºøÊú∫/PC/iPad„ÄÅÊú¨Âú∞ WiFi/3G/4G/5G ‚ΩπÁªú„ÄÅËøúÁ®ã‰∫ëÁ´ØÁõ¥Êé•Áßü‚Ω§ ÂÆâÂÖ®ÂêàËßÑÁõëÊµãÔºöÊµ∑ÈáèÁúüÂÆûËÆæÂ§áÁúüÂÆû‚ΩπÁªúËäÇÁÇπ„ÄÅ‰∏∞ÂØåÁöÑÂú∞ÂüüÂåñÂÆâÂÖ®ËßÑÂàô„ÄÅGDPR Á≠âÂÆâÂÖ®ÂêàËßÑ‰øùÈöú  Êàë‰ª¨ÁöÑ‰ºòÂäø ÂÖ®ÁêÉÂ∏ÉÂ±Ä„ÄÅÂÖ®ÁêÉÊúçÂä°  ÂÖ®ÁêÉÂü∫Á°ÄËÆæÊñΩÔºöÂ∏ÉÂ±ÄÂÖ®ÁêÉÂ§ö‰∏™Âú∞ÁêÜÂå∫ÂüüÔºåÊúçÂä°Ë¶ÜÁõñ‰∫öÂ§™„ÄÅ‚æÆÊ¥≤„ÄÅÊãâÁæé„ÄÅ‰∏≠‰∏úÁ≠âÂå∫Âüü ÊúçÂä° 50+ ‰∏™ÂõΩÂÆ∂ÔºöÊúçÂä°ÂÖ®ÁêÉ 50 Â§ö‰∏™ÂõΩÂÆ∂Ôºå150+ Âú∞Âå∫ 100+ ÂΩìÂú∞Âêà‰Ωú‰ºô‰º¥ÔºöÂ§öËØ≠‚æî„ÄÅÂΩìÂú∞ËÆ§ËØÅÂÆûÈ™åÂÆ§„ÄÅÂΩìÂú∞ËµÑÊ∫ê  ÂÖ®ÁêÉÁõëÊµãËäÇÁÇπÈÉ®ÁΩ≤  ÂÖ®ÁêÉËÆæÂ§áÊú∫ÊüúÔºö3,000+ ÂÖ®ÁêÉ‚ΩπÁªúËäÇÁÇπÔºö2,000+ Êµ∑Â§ñË¶ÜÁõñÂüéÂ∏ÇÔºö110+ ÂõΩÂÜÖË¶ÜÁõñÂüéÂ∏ÇÔºö40+  Â∫îÁî®Âú∫ÊôØ  ÂÖ≥ÈîÆËØçÔºöÈùû‰æµÂÖ•Âºè„ÄÅËá™Âä®Âåñ„ÄÅÊ∑±Â∫¶Â≠¶‰π†\n  AppÔºöÂÆâË£Ö‰∏ãËΩΩ‰ºòÂåñ„ÄÅÂÆâÂÖ®ÂêàËßÑÂáÜ‚ºä„ÄÅ‰∏™‚ºàÈöêÁßÅ‰øùÊä§ Ê∏∏ÊàèÔºöÂΩìÂú∞‚ΩπÈÄüÁõëÊµã„ÄÅÂΩìÂú∞‚ΩÄ‰ªò‰π†ÊÉØ„ÄÅËàÜÊÉÖ‰ΩìÈ™åÂàÜÊûê ÁΩëÁ´ôÔºöÂΩìÂú∞‚ΩπÁªúÊÄßËÉΩ„ÄÅ‚ΩπÁ´ôÊú¨Âú∞‰ΩìÈ™å„ÄÅÂØπÊ†áËãπÊûú‚ΩπÁ´ô Á§æ‰∫§Â®±‰πêÔºö‚æ≥È¢ëË¥®ÈáèËØÑÊµã„ÄÅËßÜÈ¢ëË¥®ÈáèËØÑÊµã„ÄÅËàÜÊÉÖÊï∞ÊçÆÂàÜÊûê  ÊàêÂäüÊ°à‰æã ÊüêÂ§¥ÈÉ®Â§ßÂéÇÔºöÂÖ®ÁêÉÂåñÁü≠ËßÜÈ¢ëÁõëÊµã ËÉåÊôØÔºöÊüêÂ§¥ÈÉ®ÂÖ®ÁêÉÂåñÁü≠ËßÜÈ¢ë‰∫ßÂìÅÂú®Êüê‰∫õÂú∞Âå∫Ëøõ‚æèÊøÄËøõÁöÑÊãâÊñ∞ÂíåÊäïÊîæ‰πãÂêéÔºåÊ†∏‚ººÊåáÊ†áË∂ã‰∫éÁ®≥ÂÆöÔºåÂ∏åÊúõ‰ªéÂÆ¢‚ºæÁ´Ø‰ΩìÈ™å„ÄÅÊí≠Êîæ‰ΩìÈ™å„ÄÅÂÆâÂÖ®ÂêàËßÑÂíå‚ΩπÁªúÊÄßËÉΩÁ≠âÂ§ö‰∏™Áª¥Â∫¶‰ºòÂåñ‚Ω§‚ºæ‰ΩìÈ™åÔºå‰ªé‚ΩΩËøõ‚ºÄÊ≠•ÊèêÂçáÊ†∏‚ºº‰∏öÂä°ÊåáÊ†á„ÄÇ\nËß£ÂÜ≥ÊñπÊ°àÔºö\n ÈÄöËøáÂú®‚Ω¨Ê†áÂú∞Âå∫ÁöÑËÆæÂ§áÔºàÁúüÂÆûËÆæÂ§áÔºåÁúüÂÆûÂú∞ÁêÜ‰ΩçÁΩÆÔºåÁúüÂÆûÂΩìÂú∞ËøêËê•ÂïÜÔºâ‰∏äÂèëËµ∑Êé¢Êµã‰ªªÂä°ÔºåÁªôÂá∫‰∫ßÂìÅÊ†∏‚ººÂüüÂêçÁöÑËÆøÈóÆÊÉÖÂÜµÂíåËµÑÊ∫êËØ∑Ê±ÇÊÄßËÉΩÊÉÖÂÜµÔºåÂπ∂ÈíàÂØπ‚ΩπÁªúÊÄßËÉΩÈóÆÈ¢òÁªôÂá∫‰ºòÂåñÂª∫ËÆÆ„ÄÇ ‰∏∫‰∫ßÂìÅÊèê‰æõÁâπÂÆöÂú∞Âå∫ÁöÑÁúüÂÆûËÆæÂ§á„ÄÅÁúüÂÆû‚ΩπÁªúÁéØÂ¢ÉÔºåËøòÂéüÁúüÂÆû‚Ω§‚ºæ‰Ωø‚Ω§Âú∫ÊôØÔºå‰ΩøÂæóÂÆ¢‚ºæÊõ¥ÂÆπÊòìÂÆö‰ΩçÁªàÁ´Ø‚Ω§‚ºæ‰ΩìÈ™åÈóÆÈ¢ò„ÄÇ ÈíàÂØπÂåÖ‚º§‚º©ÂíåÂÆ¢‚ºæÁ´ØÊÄßËÉΩÁ≠âÁª¥Â∫¶ÂØπÂÆ¢‚ºæÁ´ØËøõ‚æèÊµãËØïÔºåÂèëÁé∞ÂÆâË£ÖÂåÖ‰∏çÂêàÁêÜËµÑÊ∫ê„ÄÅÂÖ®Â±ÄÂºÇÂ∏∏Âà∑Êñ∞„ÄÅ‚ªö‚æØËøáÂ∫¶ÈáçÁªòÁ≠âÈóÆÈ¢òÔºåÊèê‰æõ‰ºòÂåñÂª∫ËÆÆÔºåÂ∏ÆÂä©‰∫ßÂìÅÊÄßËÉΩ‚º§ÂπÖÊèêÂçá„ÄÇ ÈíàÂØπ‰∏çÂêåÂú∞Âå∫ÁöÑÂÆâÂÖ®ÂêàËßÑËßÑÂàôÔºåÂØπ‰∫ßÂìÅËøõ‚æèÂä®ÊÄÅ„ÄÅÈùôÊÄÅÂÆâÂÖ®ÂàÜÊûêÔºåÂÆö‰Ωç‰∫ÜÂ§ö‰∏™ÂÆâÂÖ®ÈóÆÈ¢òÔºå‰øùËØÅ‰∫ßÂìÅÂú®ÊäïÊîæÂú∞Âå∫‰∏çÂ≠òÂú®ÂÆâÂÖ®ÂêàËßÑ‚ªõÈô©„ÄÇ  ‰ª∑ÂÄºÊî∂ÁõäÔºöÈÄöËøáÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÂπ≥Âè∞ÂèëÁé∞ÈóÆÈ¢òÂπ∂Êô∫ËÉΩÂΩíÂõ†ÔºåËåÉÂõ¥Ê∂âÂèä‚ΩπÁªú„ÄÅÊí≠Êîæ„ÄÅÂÆ¢‚ºæÁ´ØÊÄßËÉΩÁ≠âÂ§ö‰∏™‚ΩÖ‚æØÔºåÊúÄÁªàÂ∏ÆÂä©ÂÆ¢‚ºæÁïôÂ≠òÁ±ªÊåáÊ†áÊèêÂçá‰∫Ü 30%„ÄÇ\nÊüêÂ§¥ÈÉ®Â§ßÂéÇÔºöÂá∫Êµ∑Ê∏∏Êàè‰ΩìÈ™åÊµãËØï ËÉåÊôØÔºöÊüêÂ§¥ÈÉ®Âá∫Êµ∑Ê∏∏ÊàèÂú®Êµ∑Â§ñÊäïÊîæÂêéÔºåÊúâÂá†‰∏™ÂõΩÂÆ∂ÁöÑÊï∞ÊçÆË°®Áé∞‰∏ÄÁõ¥‰∏çÁêÜÊÉ≥ÔºåÊâÄ‰ª•Â∏åÊúõÂà©Áî®Êàë‰ª¨ÁöÑÂá∫Êµ∑ËÉΩÂäõÔºåÂ∏ÆÂä©‰ªñ‰ª¨ÂèëÁé∞Êï∞ÊçÆ‰∏çÁêÜÊÉ≥ÁöÑÂéüÂõ†ÔºåÊèêÂçáÂÖ≥ÈîÆ‰∏öÂä°ÊåáÊ†á„ÄÇ\nËß£ÂÜ≥ÊñπÊ°àÔºö\n ÈÄöËøáÂú®Â§ö‰∏™ÊäïÊîæÂõΩÂÆ∂Ëøõ‚æèËØ≠‚æî‚ΩÇÂåñ„ÄÅËÆæÂ§á‚ΩπË∑Ø„ÄÅ‚Ω§‚ºæ‰π†ÊÉØÁöÑÊú¨Âú∞ÂåñËØÑÊµãÔºåÂèëÁé∞‰∫Ü‰∫ßÂìÅÂ≠òÂú®ÁöÑÂ§ö‰∏™Êú¨Âú∞ÂåñÈóÆÈ¢òÔºà‰æãÂ¶ÇÂΩìÂú∞Ê∏∏Êàè‚ΩπÁªúÂª∂Ëøü‚æº„ÄÅÊú™ÁøªËØëÁ≠âÔºâÔºå‰øùËØÅÂΩìÂú∞Áé©ÂÆ∂ÁöÑÊ∏∏Êàè‰ΩìÈ™å„ÄÇ ÈíàÂØπÊ∏∏ÊàèÊî∂‚ºä‰∏çÁ¨¶ÂêàÈ¢ÑÊúüÁöÑÈóÆÈ¢òÔºåÂà©‚Ω§ÂΩìÂú∞‰∏ªÊµÅ‚ΩπÁªúÁéØÂ¢ÉÂèäÂêÑ‰∏ªË¶Å‚ΩÖÂºèÂú®‰∏çÂêåÂú∫ÊôØ‰∏ãÁöÑÁúüÂÆû‚ΩÄ‰ªòÈ™åËØÅÔºåÂèëÁé∞‰∫Ü‚ΩÄ‰ªòËÄóÊó∂‚ªìÔºåÂ§±Ë¥•Áéá‚æºÁ≠âÂ§ö‰∏™ÈóÆÈ¢òÔºåÂ¢ûÂä†‰∫ÜÊ∏∏ÊàèÊî∂‚ºä„ÄÇ ÈíàÂØπÊµ∑Â§ñÊ¥ªÂä®ÊïàÊûúÂ∑ÆÁöÑÊÉÖÂÜµÔºåÂú®Ê¥ªÂä®‰∏äÁ∫øÂâçÁî±Êú¨Âú∞ÊµãËØï‰∏ìÂÆ∂Êèê‰æõ‰ΩìÈ™åËØÑ‰º∞ÊµãËØïÔºåÈôç‰Ωé‰∫ÜÊó∂Âå∫„ÄÅÂΩìÂú∞‰Ωø‚Ω§‰π†ÊÉØ„ÄÅÊú¨Âú∞‚ºù‚æ≥ÂÖºÂÆπÁ≠âÂ§ö‰∏™ÈóÆÈ¢òÔºåÊèêÂçá‰∫ÜÊ¥ªÂä®ÊïàÊûú„ÄÇ Êµ∑Â§ñÊú¨‚ºü‰ø°ÊÅØÂõ†‰∏∫ËØ≠‚æî„ÄÅ‚ΩÇÂåñÁ≠âÂ∑ÆÂºÇÂØºËá¥Êî∂ÈõÜ‚ºóÂàÜÂõ∞ÈöæÔºåÈÄöËøáÊµ∑Â§ñ‰∏ìÂÆ∂ËØ≠‚æîÂèä‚ΩÇÂåñÁöÑÊú¨Âú∞‰ºòÂäøÊù•Ëøõ‚æèËàÜÊÉÖ‰ø°ÊÅØÊî∂ÈõÜÔºåÂèëÁé∞‰∫ÜÂ§ö‰æãÊµ∑Â§ñ‚øä‰∫ßÂèäËôöÊãüË¥¶Âè∑ÈóÆÈ¢òÔºå‰øùÈöú‰∫Ü‰∫ßÂìÅÁöÑÂÆâÂÖ®Ôºå‰∏∫‰∏öÂä°ÂÜ≥Á≠ñÊèê‰æõ‰∫Ü‚ΩÄÊåÅ„ÄÇ  ‰ª∑ÂÄºÊî∂ÁõäÔºöÈÄöËøáÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÂπ≥Âè∞Ëøõ‚æèÊú¨Âú∞Âåñ‰ΩìÈ™åËØÑÊµãÂèäËêΩÂú∞‰ºòÂåñÂª∫ËÆÆÔºåÊúÄÁªàÂ∏ÆÂä©ÂÆ¢‚ºæÂú®Â§ö‰∏™ÊäïÊîæÊïàÊûúÂ∑ÆÁöÑÂõΩÂÆ∂ÔºåÂπ≥ÂùáÊèêÂçá‰∫Ü 40% ÁöÑ‚ΩáÂùáÊµÅ‚Ωî„ÄÇ\nËÅîÁ≥ªÊñπÂºè E-mail: lilong.129@bytedance.com\n","categories":"","description":"Ë¶ÜÁõñÂÖ®ÁêÉ 150 Âú∞Âå∫/ÂõΩÂÆ∂Ôºå‰∏∫ÊÇ®ÁöÑÂá∫Êµ∑‰∫ßÂìÅ‰øùÈ©æÊä§Ëà™ÔºÅ","excerpt":"Ë¶ÜÁõñÂÖ®ÁêÉ 150 Âú∞Âå∫/ÂõΩÂÆ∂Ôºå‰∏∫ÊÇ®ÁöÑÂá∫Êµ∑‰∫ßÂìÅ‰øùÈ©æÊä§Ëà™ÔºÅ","ref":"/docs/services/dem/","tags":"","title":"ÂÖ®ÁêÉÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÂπ≥Âè∞"},{"body":"HttpRunner+ÔºàÁÆÄÁß∞ hrpÔºâÊòØ‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁΩëÁªúÂçèËÆÆÊµãËØïÂ∑•ÂÖ∑ÔºåÂü∫‰∫éÂΩïÂà∂ÁîüÊàêÁöÑ‰∏ÄÂ•óËÑöÊú¨ÔºåÂèØÂêåÊó∂Êª°Ë∂≥Êé•Âè£Ëá™Âä®ÂåñÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÊï∞Â≠ó‰ΩìÈ™åÁõëÊµã„ÄÅÊµãËØïÊï∞ÊçÆÁîüÊàêÁ≠âÂ§öÁª¥Â∫¶ÈúÄÊ±Ç„ÄÇÁÆÄÂçïÊòìÁî®„ÄÅÂäüËÉΩÂº∫Â§ß„ÄÅÊï∞ÊçÆÁ≤æÂáÜÊ∞∏ËøúÊòØ hrp ÊúÄÊ†∏ÂøÉÁöÑÁõÆÊ†á„ÄÇ\nÂΩìÂâç hrp ÂÆåÊï¥ÊîØÊåÅ HTTP/1.1ÔºåÂêéÁª≠Â∞ÜÈÄêÊ≠•Êâ©Â±ïÊîØÊåÅÊõ¥Â§öÁΩëÁªúÂçèËÆÆ„ÄÇ\nËÆæËÆ°ÁêÜÂøµ Áõ∏ÊØî‰∫é JMeter Á≠âÂÖ∂ÂÆÉÊµãËØïÂ∑•ÂÖ∑Ôºåhrp ÊúÄÂ§ßÁöÑ‰∏çÂêåÂú®‰∫éËÆæËÆ°ÁêÜÂøµ„ÄÇ\n Á∫¶ÂÆöÂ§ß‰∫éÈÖçÁΩÆÔºöÊµãËØïÁî®‰æãÊòØÊ†áÂáÜÁªìÊûÑÂåñÁöÑÔºåÊ†ºÂºèÁªü‰∏ÄÔºåÊñπ‰æøÂçè‰ΩúÂíåÁª¥Êä§ÔºõÂêåÊó∂ÂèØ‰∏éÊµ∑ÈáèÂ∑•ÂÖ∑ÂØπÊé•ÔºåÊòì‰∫éÂÆûÁé∞Áî®‰æãÁîüÊàêÂíåËΩ¨Êç¢ ‰∏ÄÊ¨°ÊäïÂÖ•Â§öÂ§ÑÂ§çÁî®ÔºöÂõûÂΩíÂçèËÆÆÊµãËØïÁöÑÊú¨Ë¥®Ôºå‰∏ÄÂ•óËÑöÊú¨ÂêåÊó∂ÂÆûÁé∞Êé•Âè£Ëá™Âä®Âåñ„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÊï∞Â≠ó‰ΩìÈ™åÁõëÊµã„ÄÅÊµãËØïÊï∞ÊçÆÁîüÊàêÁ≠âÂ§öÁßçÈúÄÊ±Ç ËûçÂÖ•ÊúÄ‰Ω≥ÂÆûË∑µÔºö‰∏ç‰ªÖ‰ªÖÊòØ‰∏ÄÊ¨æÊµãËØïÂ∑•ÂÖ∑ÔºåÂú®ÂäüËÉΩ‰∏≠ËûçÂÖ•ÊúÄ‰Ω≥Â∑•Á®ãÂÆûË∑µÔºåÂÆûÁé∞Èù¢ÂêëÁΩëÁªúÂçèËÆÆÁöÑ‰∏ÄÁ´ôÂºèÊµãËØïËß£ÂÜ≥ÊñπÊ°à  ÊµÅÁ®ãÂõæ Ê†∏ÂøÉÁâπÊÄß  ÁΩëÁªúÂçèËÆÆÔºöÂÆåÊï¥ÊîØÊåÅ HTTP/1.1ÔºåÂêéÁª≠Â∞ÜÈÄêÊ≠•Êâ©Â±ïÊîØÊåÅ HTTP/2, TCP, RPC, WebSocket Á≠âÊõ¥Â§öÂçèËÆÆ Â§öÊ†ºÂºèÂèØÈÄâÔºöÊµãËØïÁî®‰æãÊîØÊåÅ‰ΩøÁî® YAML/JSON/Golang/Python Ê†ºÂºèÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÂèØ‰∫íÁõ∏ËΩ¨Êç¢ ÂΩïÂà∂ \u0026 ÁîüÊàêÔºöÂèØ‰ΩøÁî® HAR/Postman/Swagger ÁîüÊàêÊµãËØïÁî®‰æãÔºõÂü∫‰∫éÈìæÂºèË∞ÉÁî®ÁöÑÊñπÊ≥ïÊèêÁ§∫‰πüÂèØÂø´ÈÄüÁºñÂÜôÊµãËØïÁî®‰æã Â§çÊùÇÂú∫ÊôØÔºöÂü∫‰∫é variables/extract/validate/hooks Êú∫Âà∂ÂèØ‰ª•Êñπ‰æøÂú∞ÂàõÂª∫‰ªªÊÑèÂ§çÊùÇÁöÑÊµãËØïÂú∫ÊôØ ÊÄßËÉΩÊµãËØïÔºöÊó†ÈúÄÈ¢ùÂ§ñÂ∑•‰ΩúÂç≥ÂèØÂÆûÁé∞ÂéãÂäõÊµãËØïÔºõÂçïÊú∫ÂèØËΩªÊùæÊîØÊíë 1w+ QPSÔºåÁªìÂêàÂàÜÂ∏ÉÂºèË¥üËΩΩËÉΩÂäõÂèØÂÆûÁé∞Êµ∑ÈáèÂèëÂéã ÁΩëÁªúÊÄßËÉΩÈááÈõÜÔºöÂú®Âú∫ÊôØÂåñÊé•Âè£ÊµãËØïÁöÑÂü∫Á°Ä‰∏äÔºåÂèØÈ¢ùÂ§ñÈááÈõÜÁΩëÁªúÈìæË∑ØÊÄßËÉΩÊåáÊ†áÔºàDNS Ëß£Êûê„ÄÅTCP ËøûÊé•„ÄÅSSL Êè°Êâã„ÄÅÁΩëÁªú‰º†ËæìÁ≠âÔºâ ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ / Â∫ìÂáΩÊï∞ÔºöÂêåÊó∂ÊîØÊåÅ‰∫åËøõÂà∂ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑Âíå Golang/Python Â∫ìÂáΩÊï∞ÂºïÁî®‰∏§Áßç‰ΩøÁî®ÊñπÂºè Êèí‰ª∂ÂåñÊú∫Âà∂ÔºöÂÜÖÁΩÆ‰∏∞ÂØåÁöÑÂáΩÊï∞Â∫ìÔºåÂêåÊó∂ÂèØ‰ª•Âü∫‰∫éËá™ÂÆö‰πâÊèí‰ª∂ËΩªÊùæÂÆûÁé∞Êõ¥Â§öËÉΩÂäõ È´òÂ∫¶ÂèØÊâ©Â±ïÊÄßÔºöÊîØÊåÅ‰∫åÊ¨°ÂºÄÂèëÔºåÂèØËΩªÊùæÂÆûÁé∞Êé•Âè£ÊµãËØï„ÄÅÂéãÂäõÊµãËØï„ÄÅÊµãËØïÊï∞ÊçÆÊúçÂä°Á≠âÂ∑•ÂÖ∑Âπ≥Âè∞ ÂºÄÊ∫êÂÖçË¥πÔºöÈááÁî®ÂºÄÊ∫êÂçèËÆÆ Apache-2.0ÔºåÂÖçË¥π‰ΩøÁî®Êó†‰ªª‰ΩïÈôêÂà∂  Áî®Êà∑Â£∞Èü≥ ÈÄöËøáË∞ÉÁ†îÈóÆÂç∑ÁªüËÆ°ÂàÜÊûêÔºåHttpRunner Áî®Êà∑ÊúÄÂñúÊ¨¢ÁöÑÁâπÊÄßÂåÖÊã¨Ôºö\n ÁÆÄÂçïÊòìÁî®ÔºöÊµãËØïÁî®‰æãÊîØÊåÅ YAML/JSON Ê†áÂáÜÂåñÊ†ºÂºèÔºåÂèØÈÄöËøáÂΩïÂà∂ÁöÑÊñπÂºèÂø´ÈÄüÁîüÊàêÁî®‰æãÔºå‰∏äÊâãÁÆÄÂçïÔºå‰ΩøÁî®Êñπ‰æø ÂäüËÉΩÂº∫Â§ßÔºöÊîØÊåÅÁÅµÊ¥ªÁöÑËá™ÂÆö‰πâÂáΩÊï∞Âíå hook Êú∫Âà∂ÔºåÂèÇÊï∞ÂèòÈáè„ÄÅÊï∞ÊçÆÈ©±Âä®„ÄÅÁªìÊûúÊñ≠Ë®ÄÁ≠âÊú∫Âà∂‰∏ÄÂ∫î‰ø±ÂÖ®ÔºåËΩªÊùæÈÄÇÂ∫îÂêÑÁßçÂ§çÊùÇÂú∫ÊôØ ËÆæËÆ°ÁêÜÂøµÔºöÊµãËØïÁî®‰æãÁªÑÁªáÊîØÊåÅÂàÜÂ±ÇËÆæËÆ°ÔºåÊ†ºÂºèÁªü‰∏ÄÔºåÊòì‰∫éÂÆûÁé∞ÊµãËØïÁî®‰æãÁöÑÁª¥Êä§ÂíåÂ§çÁî®  Êõ¥Â§öÂÜÖÂÆπËØ¶ËßÅ HttpRunner È¶ñËΩÆÁî®Êà∑Ë∞ÉÁ†îÊä•ÂëäÔºà2022.02Ôºâ\n","categories":"","description":"HttpRunner+ ÊòØ‰ªÄ‰πàÔºü","excerpt":"HttpRunner+ ÊòØ‰ªÄ‰πàÔºü","ref":"/docs/overview/","tags":"","title":"Êï¥‰ΩìÊ¶ÇËßà"},{"body":" 1„ÄÅHttpRunner Áî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑ ÊåÅÁª≠Êî∂ÈõÜ‰∏≠ÔºåÊàë‰ª¨Â∞ÜÂü∫‰∫éÁî®Êà∑ÂèçÈ¶àÂä®ÊÄÅË∞ÉÊï¥‰∫ßÂìÅÁâπÊÄßÂíåÈúÄÊ±Ç‰ºòÂÖàÁ∫ß„ÄÇ 2„ÄÅÊ¨¢ËøéÂä†ÂÖ• HttpRunner Áî®Êà∑Á§æÂå∫Ôºå‰∫§ÊµÅ‰ΩøÁî®ÁªèÈ™åÔºåÂàÜ‰∫´ÂøÉÂæóÂíåÊÉ≥Ê≥ï„ÄÇ\n ËØ•ÊñáÊ°£Â∞ÜÂ∏ÆÂä©‰Ω†ÁêÜËß£ HttpRunner+ ÁöÑËÆæËÆ°ÁêÜÂøµÂíåÊ†∏ÂøÉÊ¶ÇÂøµÔºåÂπ∂Âø´ÈÄüÁÜüÊÇâÂºÄÂßã‰ΩøÁî®„ÄÇ\nËÆ¢ÈòÖ ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","categories":"","description":"","excerpt":" 1„ÄÅHttpRunner Áî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑ ÊåÅÁª≠Êî∂ÈõÜ‰∏≠ÔºåÊàë‰ª¨Â∞ÜÂü∫‰∫éÁî®Êà∑ÂèçÈ¶àÂä®ÊÄÅË∞ÉÊï¥‰∫ßÂìÅÁâπÊÄßÂíåÈúÄÊ±Ç‰ºòÂÖàÁ∫ß„ÄÇ 2„ÄÅÊ¨¢ËøéÂä†ÂÖ• HttpRunner Áî®Êà∑Á§æÂå∫Ôºå‰∫§ÊµÅ‰ΩøÁî®ÁªèÈ™åÔºåÂàÜ‰∫´ÂøÉÂæóÂíåÊÉ≥Ê≥ï„ÄÇ\n ËØ•ÊñáÊ°£Â∞ÜÂ∏ÆÂä©‰Ω†ÁêÜËß£ HttpRunner+ ÁöÑËÆæËÆ°ÁêÜÂøµÂíåÊ†∏ÂøÉÊ¶ÇÂøµÔºåÂπ∂Âø´ÈÄüÁÜüÊÇâÂºÄÂßã‰ΩøÁî®„ÄÇ\nËÆ¢ÈòÖ ÂÖ≥Ê≥® HttpRunner ÁöÑÂæÆ‰ø°ÂÖ¨‰ºóÂè∑ÔºåÁ¨¨‰∏ÄÊó∂Èó¥Ëé∑ÂæóÊúÄÊñ∞ËµÑËÆØ„ÄÇ\n","ref":"/docs/","tags":"","title":"Ê¨¢Ëøé‰ΩøÁî® HttpRunner+"},{"body":"Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory ‚ÄúHello World‚Äù example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":"","description":"What does your user need to know to try your project?\n","excerpt":"What does your user need to know to try your project?\n","ref":"/en/docs/quickstart/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"‰æùÊâò‰∫éÂ≠óËäÇÁ≥ª‰∫ßÂìÅÁöÑÂá∫Êµ∑ÁªèÈ™åÔºåÂä©ÂäõÊÇ®ÁöÑÂá∫Êµ∑‰∫ßÂìÅÊâ¨Â∏ÜËµ∑Ëà™ÔºÅ","excerpt":"‰æùÊâò‰∫éÂ≠óËäÇÁ≥ª‰∫ßÂìÅÁöÑÂá∫Êµ∑ÁªèÈ™åÔºåÂä©ÂäõÊÇ®ÁöÑÂá∫Êµ∑‰∫ßÂìÅÊâ¨Â∏ÜËµ∑Ëà™ÔºÅ","ref":"/docs/services/consultation/","tags":"","title":"ÂÖ®ÁêÉÊï∞Â≠ó‰ΩìÈ™åÂí®ËØ¢ÊúçÂä°"},{"body":"Information in this section helps your user try your project themselves.\n  What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.\n  Introductory ‚ÄúHello World‚Äù example, if appropriate. More complex tutorials should live in the Tutorials section.\n  Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.\nPrerequisites Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nInstallation Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nSetup Is there any initial setup users need to do after installation to try your project?\nTry it out! Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":"","description":"What does your user need to know to try your project?\n","excerpt":"What does your user need to know to try your project?\n","ref":"/docs/quickstart/","tags":"","title":"Âø´ÈÄü‰∏äÊâã"},{"body":"HttpRunner+ is developed with Golang, it supports Go 1.13+ and most operating systems. Combination of Go 1.13/1.14/1.15/1.16/1.17 and macOS/Linux/Windows are tested continuously on GitHub-Actions.\ninstall as CLI tool $ go get -u github.com/httprunner/hrp/hrp Since installed, you will get a hrp command with multiple sub-commands.\n$ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ‚ú® üöÄ ‚ú® License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. install as library Beside using hrp as a CLI tool, you can also use it as golang library.\n$ go get -u github.com/httprunner/hrp Then you can import github.com/httprunner/hrp and write testcases in Golang.\n","categories":"","description":"How to install HttpRunner.","excerpt":"How to install HttpRunner.","ref":"/en/docs/installation/","tags":"","title":"Installation"},{"body":"ÂÆâË£ÖÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ HttpRunner+ ÈááÁî® Golang ÂºÄÂèëÔºåÁõ∏ÊØî‰∫é‰πãÂâçÁöÑ Python ÁâàÊú¨ÔºåÊúÄÂ§ßÁöÑ‰∏Ä‰∏™‰ºòÂäøÊòØÂèØ‰ª•ÁºñËØëÁîüÊàê‰∫åËøõÂà∂Êñá‰ª∂„ÄÇÂú®ÁõÆÊ†áÁ≥ªÁªüÂè™ÈúÄË¶Å‰∏ãËΩΩÂà∞ÂØπÂ∫îÁ≥ªÁªüÁéØÂ¢ÉÁöÑ‰∫åËøõÂà∂Êñá‰ª∂Âç≥ÂèØËøêË°åÔºåÊó†ÈúÄÂÆâË£Ö‰ªª‰ΩïËøêË°åÊó∂ÁéØÂ¢É‰æùËµñÔºà‰æãÂ¶Ç Python„ÄÅJava JDK„ÄÅNodeJS Á≠âÔºâ„ÄÇ\n‰∏ÄÈîÆÈÉ®ÁΩ≤ÔºàÊé®ËçêÔºâ ‰∏∫‰∫ÜÂä†ÈÄü‰∫åËøõÂà∂ÂåÖÁöÑ‰∏ãËΩΩÈÄüÂ∫¶ÔºåÊàë‰ª¨Â∑≤ÁªèÂ∞ÜÁºñËØë‰∫ßÁâ©‰∏ä‰º†Âà∞‰∫ÜÈòøÈáå‰∫ë OSSÔºåÂπ∂‰∏îÊèê‰æõ‰∫Ü‰∏ÄÈîÆÂÆâË£ÖÈÉ®ÁΩ≤ÁöÑËÑöÊú¨„ÄÇÂè™ÈúÄÊâßË°å‰∏ÄÊù° shell ÂëΩ‰ª§ÔºåÂç≥ÂèØÂÆåÊàê hrp ÁöÑ‰∏ãËΩΩÂíåÂÆâË£ÖÊìç‰Ωú„ÄÇ\n Ê≥®ÔºöÂ§ßÂ§öÊï∞ Linux/macOS Á≥ªÁªü‰∏≠ÈÉΩ‰ºöÈ¢ÑÁΩÆ curl/wget ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ÔºåÂ¶ÇÊûú‰Ω†ÁöÑÁ≥ªÁªü‰∏≠Êú™ÂÆâË£ÖÔºåÈúÄËá™Ë°åËß£ÂÜ≥„ÄÇ\n # install via curl $ bash -c \"$(curl -ksSL https://httprunner.oss-cn-beijing.aliyuncs.com/install.sh)\" # install via wget $ bash -c \"$(wget https://httprunner.oss-cn-beijing.aliyuncs.com/install.sh -O -)\" Ëá™Ë°å‰∏ãËΩΩÂÆâË£Ö ÂêåÊó∂Ôºå‰Ω†‰πüÂèØ‰ª•Âú® GitHub Releases È°µÈù¢‰∏≠ÔºåËá™Ë°åÈÄâÊã©ÁâàÊú¨ËøõË°å‰∏ãËΩΩ„ÄÇ\nÂΩìÂâç HttpRunner+ Âú®ÊØèÊ¨°ÂèëÂ∏ÉÁâàÊú¨Êó∂Ôºå‰ºöËá™Âä®ÁºñËØëÁîüÊàê 5 ‰∏™ÁâàÊú¨ÔºåË¶ÜÁõñÁöÑÁéØÂ¢ÉÂåÖÊã¨Ôºö\n macOS(darwin) + amd64(x86) macOS(darwin) + arm64(M1) linux + amd64(x86) linux + arm64 windows + amd64(x86)  Â¶ÇÊûú‰Ω†ÁöÑÁ≥ªÁªüÁéØÂ¢É‰∏çÂú®Ëøô‰∏™ËåÉÂõ¥ÂÜÖÔºåÈÇ£‰πà‰Ω†Âè™ËÉΩËá™Ë°åÊãâÂèñÊ∫êÁ†ÅËøõË°åÁºñËØë‰∫Ü„ÄÇ\n# ÊãâÂèñ hrp Ê∫êÁ†Å $ git clone https://github.com/httprunner/hrp.git $ cd hrp # ÈÄöËøá make ËøõË°å‰∏ÄÈîÆÁºñËØëÔºåÁîüÊàêÁöÑ‰∫ßÁâ©Âú® output Êñá‰ª∂Â§π‰∏≠ $ make build [info] build hrp cli tool ++ mkdir -p output ++ bin_path=output/hrp ++ go build -ldflags '-s -w' -o output/hrp cli/hrp/main.go ++ ls -lh output/hrp -rwxr-xr-x 1 debugtalk staff 16M Feb 17 11:52 output/hrp ++ chmod +x output/hrp ++ ./output/hrp -v hrp version v0.6.0 Ëé∑ÂèñÂà∞ÁºñËØë‰∫ßÁâ©ÂêéÔºå‰Ω†Âè™ÈúÄÁªô hrp Ê∑ªÂä†ÂèØËøêË°åÊùÉÈôêÂç≥ÂèØ„ÄÇÂêåÊó∂Êé®ËçêÂ∞Ü hrp ÁßªÂä®Âà∞Á≥ªÁªü bin ÁõÆÂΩïÔºåÊñπ‰æøÂÖ®Â±ÄË∞ÉÁî®„ÄÇ\n$ chmod +x hrp $ mv hrp /user/local/bin Ê£ÄÊü•ÂÆâË£ÖÁªìÊûú ÂÆåÊàêÂÆâË£ÖÊìç‰ΩúÂêéÔºå‰Ω†Â∞ÜËé∑Âæó‰∏Ä‰∏™ hrp ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑„ÄÇhrp ÂåÖÂê´Â§ö‰∏™Â≠êÂëΩ‰ª§ÔºåÂÖ∑‰ΩìÁöÑ‰ΩøÁî®ÊñπÂºèÂèØÊü•ÁúãÂëΩ‰ª§Ë°åÂ∏ÆÂä©„ÄÇ\nÂú®‰Ω†ÁöÑÂëΩ‰ª§Ë°åÁªàÁ´Ø‰∏≠ÊâßË°å hrp -h ÂëΩ‰ª§ÔºåÂ¶ÇÊûúËÉΩÊ≠£Â∏∏ÊâìÂç∞Â∏ÆÂä©‰ø°ÊÅØÔºåÂàôËØ¥Êòé hrp Â∑≤ÂÆâË£ÖÊàêÂäü„ÄÇ\n$ hrp -h hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ‚ú® üöÄ ‚ú® License: Apache-2.0 Github: https://github.com/httprunner/hrp Copyright 2021 debugtalk Usage: hrp [command] Available Commands: boom run load test with boomer completion generate the autocompletion script for the specified shell har2case Convert HAR to json/yaml testcase files help Help about any command run run API test Flags: -h, --help help for hrp --log-json set log to json format -l, --log-level string set log level (default \"INFO\") -v, --version version for hrp Use \"hrp [command] --help\" for more information about a command. ÂÆâË£Ö‰æùËµñÂåÖÔºàÂºÄÂèëËÄÖÊ®°ÂºèÔºâ HttpRunner+ Èô§‰∫ÜÂèØ‰ª•‰Ωú‰∏∫ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑Êèê‰æõÁªôÁî®Êà∑ËøõË°å‰ΩøÁî®ÔºåËøòÂèØ‰ª•‰Ωú‰∏∫Â∫ìÂáΩÊï∞Ôºå‰æõÂºÄÂèëËÄÖË∞ÉÁî®ËøõË°å‰∫åÊ¨°ÂºÄÂèë„ÄÇ\nÂΩìÂâç HttpRunner+ ÊîØÊåÅ Golang 1.16+ Âíå‰∏ªÊµÅÊìç‰ΩúÁ≥ªÁªüÔºàLinux/macOS/WindowsÔºâÔºåÊàë‰ª¨ÈÄöËøáÂú® GitHub-Actions ÈÖçÁΩÆ CI ËøõË°å‰∫ÜÂÖºÂÆπÊÄßÊµãËØï‰øùÈöú„ÄÇ\nÈÄöËøáÂ¶Ç‰∏ãÂëΩ‰ª§ÂèØÂÆâË£Ö‰æùËµñÂåÖÔºö\n$ go get -u github.com/httprunner/hrp ÁÑ∂Âêé‰Ω†Â∞±ÂèØ‰ª•Âú®‰Ω†ÁöÑÂ∑•Á®ã‰∏≠ÂØºÂÖ• github.com/httprunner/hrp ËøõË°å Golang Áî®‰æãÁºñÂÜôÊàñËÄÖ‰∫åÊ¨°ÂºÄÂèë‰∫Ü„ÄÇ\n","categories":"","description":"Êú¨Êñá‰ªãÁªç‰∫Ü HttpRunner ÁöÑÂá†ÁßçÂÆâË£ÖÊñπÂºè„ÄÇ","excerpt":"Êú¨Êñá‰ªãÁªç‰∫Ü HttpRunner ÁöÑÂá†ÁßçÂÆâË£ÖÊñπÂºè„ÄÇ","ref":"/docs/installation/","tags":"","title":"ÂÆâË£ÖËØ¥Êòé"},{"body":"TestCase TestStep TestSuite functions \"${func{$a, $b}}\" variables $abc or ${abc}\nextract validate ","categories":"","description":"The key concepts for HttpRunner.","excerpt":"The key concepts for HttpRunner.","ref":"/en/docs/concepts/","tags":"","title":"Concepts"},{"body":"ÊµãËØïÁî®‰æãÔºàTestCaseÔºâ ‰ªé 2.0 ÁâàÊú¨ÂºÄÂßãÔºåHttpRunner ÂºÄÂßãÂØπÊµãËØïÁî®‰æãÁöÑÂÆö‰πâËøõË°åËøõ‰∏ÄÊ≠•ÁöÑÊòéÁ°ÆÔºåÂèÇËÄÉ wiki ‰∏äÁöÑÊèèËø∞„ÄÇ\n A test case is a specification of the inputs, execution conditions, testing procedure, and expected results that define a single test to be executed to achieve a particular software testing objective, such as to exercise a particular program path or to verify compliance with a specific requirement.\n Ê¶ÇÊã¨‰∏ãÊù•Ôºå‰∏ÄÊù°ÊµãËØïÁî®‰æãÔºàtestcaseÔºâÂ∫îËØ•ÊòØ‰∏∫‰∫ÜÊµãËØïÊüê‰∏™ÁâπÂÆöÁöÑÂäüËÉΩÈÄªËæëËÄåÁ≤æÂøÉËÆæËÆ°ÁöÑÔºåÂπ∂‰∏îËá≥Â∞ëÂåÖÂê´Â¶Ç‰∏ãÂá†ÁÇπÔºö\n ÊòéÁ°ÆÁöÑÊµãËØïÁõÆÁöÑÔºàachieve a particular software testing objectiveÔºâ ÊòéÁ°ÆÁöÑËæìÂÖ•ÔºàinputsÔºâ ÊòéÁ°ÆÁöÑËøêË°åÁéØÂ¢ÉÔºàexecution conditionsÔºâ ÊòéÁ°ÆÁöÑÊµãËØïÊ≠•È™§ÊèèËø∞Ôºàtesting procedureÔºâ ÊòéÁ°ÆÁöÑÈ¢ÑÊúüÁªìÊûúÔºàexpected resultsÔºâ  ÂØπÂ∫îÂú∞ÔºåHttpRunner ÁöÑÊµãËØïÁî®‰æãÊèèËø∞ÊñπÂºèËøõË°åÂ¶Ç‰∏ãËÆæËÆ°Ôºö\n ÊµãËØïÁî®‰æãÂ∫îËØ•ÊòØÂÆåÊï¥‰∏îÁã¨Á´ãÁöÑÔºåÊØèÊù°ÊµãËØïÁî®‰æãÂ∫îËØ•ÊòØÈÉΩÂèØ‰ª•Áã¨Á´ãËøêË°åÁöÑÔºõÂú® HttpRunner ‰∏≠ÔºåÊØè‰∏™ YAML/JSON Êñá‰ª∂ÂØπÂ∫î‰∏ÄÊù°ÊµãËØïÁî®‰æã„ÄÇ ÊµãËØïÁî®‰æãÂåÖÂê´ ÊµãËØïËÑöÊú¨ Âíå ÊµãËØïÊï∞ÊçÆ ‰∏§ÈÉ®ÂàÜÔºö  ÊµãËØïÁî®‰æã = ÊµãËØïËÑöÊú¨ + ÊµãËØïÊï∞ÊçÆ ÊµãËØïËÑöÊú¨ ÈáçÁÇπÊòØÊèèËø∞ÊµãËØïÁöÑ ‰∏öÂä°ÂäüËÉΩÈÄªËæëÔºåÂåÖÊã¨È¢ÑÁΩÆÊù°‰ª∂„ÄÅÊµãËØïÊ≠•È™§„ÄÅÈ¢ÑÊúüÁªìÊûúÁ≠âÔºåÂπ∂‰∏îÂèØ‰ª•ÁªìÂêàËæÖÂä©ÂáΩÊï∞Ôºàdebugtalk.pyÔºâÂÆûÁé∞Â§çÊùÇÁöÑËøêÁÆóÈÄªËæëÔºõÂèØ‰ª•Â∞Ü ÊµãËØïËÑöÊú¨ ÁêÜËß£‰∏∫ÁºñÁ®ãËØ≠Ë®Ä‰∏≠ÁöÑ Á±ªÔºàclassÔºâÔºõ ÊµãËØïÊï∞ÊçÆ ÈáçÁÇπÊòØÂØπÂ∫îÊµãËØïÁöÑ ‰∏öÂä°Êï∞ÊçÆÈÄªËæëÔºåÂèØ‰ª•ÁêÜËß£‰∏∫Á±ªÁöÑÂÆû‰æãÂåñÊï∞ÊçÆÔºõ ÊµãËØïÊï∞ÊçÆ Âíå ÊµãËØïËÑöÊú¨ ÂàÜÁ¶ªÂêéÔºåÂ∞±ÂèØ‰ª•ÊØîËæÉÊñπ‰æøÂú∞ÂÆûÁé∞Êï∞ÊçÆÈ©±Âä®ÊµãËØïÔºåÈÄöËøáÂØπÊµãËØïËÑöÊú¨‰º†ÂÖ•‰∏ÄÁªÑÊï∞ÊçÆÔºåÂÆûÁé∞Âêå‰∏Ä‰∏öÂä°ÂäüËÉΩÂú®‰∏çÂêåÊï∞ÊçÆÈÄªËæë‰∏ãÁöÑÊµãËØïÈ™åËØÅ„ÄÇ    ÊµãËØïÊ≠•È™§ÔºàTestStepÔºâ ÊµãËØïÁî®‰æãÊòØÊµãËØïÊ≠•È™§ÁöÑ ÊúâÂ∫è ÈõÜÂêàÔºåËÄåÂØπ‰∫éÊé•Âè£ÊµãËØïÊù•ËØ¥ÔºåÊØè‰∏Ä‰∏™ÊµãËØïÊ≠•È™§Â∫îËØ•Â∞±ÂØπÂ∫î‰∏Ä‰∏™ API ÁöÑËØ∑Ê±ÇÊèèËø∞„ÄÇ\nÊµãËØïÁî®‰æãÈõÜÔºàTestSuiteÔºâ ÊµãËØïÁî®‰æãÈõÜ ÊòØ ÊµãËØïÁî®‰æã ÁöÑ Êó†Â∫è ÈõÜÂêàÔºåÈõÜÂêà‰∏≠ÁöÑÊµãËØïÁî®‰æãÂ∫îËØ•ÈÉΩÊòØÁõ∏‰∫íÁã¨Á´ãÔºå‰∏çÂ≠òÂú®ÂÖàÂêé‰æùËµñÂÖ≥Á≥ªÁöÑ„ÄÇ\nÂ¶ÇÊûúÁ°ÆÂÆûÂ≠òÂú®ÂÖàÂêé‰æùËµñÂÖ≥Á≥ªÊÄé‰πàÂäûÔºå‰æãÂ¶ÇÁôªÂΩïÂäüËÉΩÂíå‰∏ãÂçïÂäüËÉΩ„ÄÇÊ≠£Á°ÆÁöÑÂÅöÊ≥ïÂ∫îËØ•ÊòØÔºåÂú®‰∏ãÂçïÊµãËØïÁî®‰æãÁöÑÂâçÁΩÆÊ≠•È™§‰∏≠ÊâßË°åÁôªÂΩïÊìç‰Ωú„ÄÇ\n- config:name:order product- test:name:logintestcase:testcases/login.yml- test:name:add to cartapi:api/add_cart.yml- test:name:make orderapi:api/make_order.ymlÊµãËØïÂú∫ÊôØ ÊµãËØïÂú∫ÊôØ Âíå ÊµãËØïÁî®‰æãÈõÜ ÊòØÂêå‰∏ÄÊ¶ÇÂøµÔºåÈÉΩÊòØ ÊµãËØïÁî®‰æã ÁöÑ Êó†Â∫è ÈõÜÂêà„ÄÇ\n Êé•Âè£ ÊµãËØïÁî®‰æãÈõÜ ÂèÇÊï∞ ÂèòÈáè ÊµãËØïËÑöÊú¨ÔºàYAML/JSONÔºâ debugtalk.py ÁéØÂ¢ÉÂèòÈáè  È°πÁõÆÊ†πÁõÆÂΩï functions \"${func{$a, $b}}\" variables $abc or ${abc}\nextract validate ","categories":"","description":"The key concepts for HttpRunner.","excerpt":"The key concepts for HttpRunner.","ref":"/docs/concepts/","tags":"","title":"Ê†∏ÂøÉÊ¶ÇÂøµ"},{"body":" This is a placeholder page that shows you how to use this template site.\n Do you have any example applications or code for your users in your repo or elsewhere? Link to your examples here.\n","categories":"","description":"See your project in action!\n","excerpt":"See your project in action!\n","ref":"/en/docs/examples/","tags":"","title":"Examples"},{"body":"Start with CLI HttpRunner+ supports running load test without extra work. You can use hrp boom command to run YAML/JSON testcases in load testing mode.\nBy default, hrp will print load testing results in console output, refreshed every 3 seconds.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 6:09PM INF Set log to pretty console 6:09PM INF Set log level to INFO 6:09PM INF Set log level to WARN 2021/12/02 18:09:48 Spawning 10 clients immediately Current time: 2021/12/02 18:09:51, Users: 10, Total RPS: 20, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 10 | 0 | 2400 | 2423.00 | 2422 | 2424 | 300 | 10 | 0 | | request-POST | post json data | 10 | 0 | 310 | 304.50 | 301 | 307 | 420 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ Current time: 2021/12/02 18:09:54, Users: 10, Total RPS: 16, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 18 | 0 | 1200 | 1157.39 | 1083 | 1367 | 300 | 9 | 0 | | request-POST | post json data | 10 | 0 | 290 | 290.20 | 287 | 293 | 420 | 10 | 0 | | request-POST | post form data | 20 | 0 | 310 | 300.00 | 287 | 311 | 441 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ Current time: 2021/12/02 18:09:57, Users: 10, Total RPS: 17, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 12 | 0 | 1100 | 1153.92 | 1081 | 1464 | 300 | 6 | 0 | | request-POST | post json data | 20 | 0 | 270 | 279.70 | 269 | 337 | 420 | 6 | 0 | | request-POST | post form data | 20 | 0 | 270 | 272.85 | 269 | 279 | 441 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ If you want to disable console output, you can add a --disable-console-output flag.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --disable-console-output You can reference this doc for all command arguments.\nReport metrics to Prometheus Pushgateway Besides printing load testing results in console, you can also push metrics to Prometheus Pushgateway, and then you can configure pretty graphs on Grafana.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --prometheus-gateway http://127.0.0.1:9091 You can deploy the Pushgateway using the prom/pushgateway Docker image at ease.\n$ docker pull prom/pushgateway $ docker run -d -p 9091:9091 prom/pushgateway ","categories":"","description":"How to run load test.","excerpt":"How to run load test.","ref":"/en/docs/loadtest/","tags":"","title":"Run load test"},{"body":"Start with CLI HttpRunner+ supports running load test without extra work. You can use hrp boom command to run YAML/JSON testcases in load testing mode.\nBy default, hrp will print load testing results in console output, refreshed every 3 seconds.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 6:09PM INF Set log to pretty console 6:09PM INF Set log level to INFO 6:09PM INF Set log level to WARN 2021/12/02 18:09:48 Spawning 10 clients immediately Current time: 2021/12/02 18:09:51, Users: 10, Total RPS: 20, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 10 | 0 | 2400 | 2423.00 | 2422 | 2424 | 300 | 10 | 0 | | request-POST | post json data | 10 | 0 | 310 | 304.50 | 301 | 307 | 420 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ Current time: 2021/12/02 18:09:54, Users: 10, Total RPS: 16, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 18 | 0 | 1200 | 1157.39 | 1083 | 1367 | 300 | 9 | 0 | | request-POST | post json data | 10 | 0 | 290 | 290.20 | 287 | 293 | 420 | 10 | 0 | | request-POST | post form data | 20 | 0 | 310 | 300.00 | 287 | 311 | 441 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ Current time: 2021/12/02 18:09:57, Users: 10, Total RPS: 17, Total Fail Ratio: 0.0% +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ | request-GET | get with params | 12 | 0 | 1100 | 1153.92 | 1081 | 1464 | 300 | 6 | 0 | | request-POST | post json data | 20 | 0 | 270 | 279.70 | 269 | 337 | 420 | 6 | 0 | | request-POST | post form data | 20 | 0 | 270 | 272.85 | 269 | 279 | 441 | 10 | 0 | +--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+ If you want to disable console output, you can add a --disable-console-output flag.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --disable-console-output You can reference this doc for all command arguments.\nReport metrics to Prometheus Pushgateway Besides printing load testing results in console, you can also push metrics to Prometheus Pushgateway, and then you can configure pretty graphs on Grafana.\n$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --prometheus-gateway http://127.0.0.1:9091 You can deploy the Pushgateway using the prom/pushgateway Docker image at ease.\n$ docker pull prom/pushgateway $ docker run -d -p 9091:9091 prom/pushgateway ","categories":"","description":"How to run load test.","excerpt":"How to run load test.","ref":"/docs/loadtest/","tags":"","title":"ÂéãÂäõÊµãËØï"},{"body":" This is a placeholder page that shows you how to use this template site.\n Do you have any example applications or code for your users in your repo or elsewhere? Link to your examples here.\n","categories":"","description":"See your project in action!\n","excerpt":"See your project in action!\n","ref":"/docs/examples/","tags":"","title":"Á§∫‰æãÂ±ïÁ§∫"},{"body":"Technical training Technical support Privatization deployment Customized development ","categories":"","description":"HttpRunner Â∞ÜÊ∞∏‰πÖ‰øùÊåÅÂºÄÊ∫êÂÖçË¥πÔºå‰ΩÜ‰πü‰ºöÊé¢Á¥¢‰∏Ä‰∫õÂïÜ‰∏öÂåñÁöÑÂ¢ûÂÄºÊúçÂä°Ôºå‰ª•Ê≠§Ëé∑ÂæóÊõ¥ÈïøËøúÁöÑÂèëÂ±ï„ÄÇ","excerpt":"HttpRunner Â∞ÜÊ∞∏‰πÖ‰øùÊåÅÂºÄÊ∫êÂÖçË¥πÔºå‰ΩÜ‰πü‰ºöÊé¢Á¥¢‰∏Ä‰∫õÂïÜ‰∏öÂåñÁöÑÂ¢ûÂÄºÊúçÂä°Ôºå‰ª•Ê≠§Ëé∑ÂæóÊõ¥ÈïøËøúÁöÑÂèëÂ±ï„ÄÇ","ref":"/docs/services/","tags":"","title":"ÂïÜ‰∏öÂåñÊúçÂä°"},{"body":" These basic sample guidelines assume that your Docsy site is deployed using Netlify and your files are stored in GitHub. You can use the guidelines ‚Äúas is‚Äù or adapt them with your own instructions: for example, other deployment options, information about your doc project‚Äôs file structure, project-specific review guidelines, versioning guidelines, or any other information your users might find useful when updating your site. Kubeflow has a great example.\nDon‚Äôt forget to link to your own doc repo rather than our example site! Also make sure users can find these guidelines from your doc repo README: either add them there and link to them from this page, add them here and link to them from the README, or include them in both locations.\n We use Hugo to format and generate our website, the Docsy theme for styling and site structure, and Netlify to manage the deployment of the site. Hugo is an open-source static site generator that provides us with templates, content organisation in a standard directory structure, and a website generation engine. You write the pages in Markdown (or HTML if you want), and Hugo wraps them up into a website.\nAll submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.\nQuick start with Netlify Here‚Äôs a quick guide to updating the docs. It assumes you‚Äôre familiar with the GitHub workflow and you‚Äôre happy to use the automated preview of your doc updates:\n Fork the Goldydocs repo on GitHub. Make your changes and send a pull request (PR). If you‚Äôre not yet ready for a review, add ‚ÄúWIP‚Äù to the PR name to indicate it‚Äôs a work in progress. (Don‚Äôt add the Hugo property ‚Äúdraft = true‚Äù to the page front matter, because that prevents the auto-deployment of the content preview described in the next point.) Wait for the automated PR workflow to do some checks. When it‚Äôs ready, you should see a comment like this: deploy/netlify ‚Äî Deploy preview ready! Click Details to the right of ‚ÄúDeploy preview ready‚Äù to see a preview of your updates. Continue updating your doc and pushing your changes until you‚Äôre happy with the content. When you‚Äôre ready for a review, add a comment to the PR, and remove any ‚ÄúWIP‚Äù markers.  Updating a single page If you‚Äôve just spotted something you‚Äôd like to change while using the docs, Docsy has a shortcut for you:\n Click Edit this page in the top right hand corner of the page. If you don‚Äôt already have an up to date fork of the project repo, you are prompted to get one - click Fork this repository and propose changes or Update your Fork to get an up to date version of the project to edit. The appropriate page in your fork is displayed in edit mode. Follow the rest of the Quick start with Netlify process above to make, preview, and propose your changes.  Previewing your changes locally If you want to run your own local Hugo server to preview your changes as you work:\n  Follow the instructions in Getting started to install Hugo and any other tools you need. You‚Äôll need at least Hugo version 0.45 (we recommend using the most recent available version), and it must be the extended version, which supports SCSS.\n  Fork the Goldydocs repo repo into your own project, then create a local copy using git clone. Don‚Äôt forget to use --recurse-submodules or you won‚Äôt pull down some of the code you need to generate a working site.\ngit clone --recurse-submodules --depth 1 https://github.com/google/docsy-example.git   Run hugo server in the site root directory. By default your site will be available at http://localhost:1313/. Now that you‚Äôre serving your site locally, Hugo will watch for changes to the content and automatically refresh your site.\n  Continue with the usual GitHub workflow to edit files, commit them, push the changes up to your fork, and create a pull request.\n  Creating an issue If you‚Äôve found a problem in the docs, but you‚Äôre not sure how to fix it yourself, please create an issue in the Goldydocs repo. You can also create an issue about a specific page by clicking the Create Issue button in the top right hand corner of the page.\nUseful resources  Docsy user guide: All about Docsy, including how it manages navigation, look and feel, and multi-language support. Hugo documentation: Comprehensive reference for Hugo. Github Hello World!: A basic introduction to GitHub concepts and workflow.  ","categories":"","description":"How to contribute to the docs\n","excerpt":"How to contribute to the docs\n","ref":"/en/docs/contribution/","tags":"","title":"Contribution Guidelines"},{"body":"","categories":"","description":"Êú¨ÊñáÂ∞Ü‰ªãÁªçÂ¶Ç‰ΩïÊõ¥Â•ΩÂú∞ÂèÇ‰∏éÂà∞ HttpRunner ÁöÑÂºÄÂèëÂÖ±Âª∫","excerpt":"Êú¨ÊñáÂ∞Ü‰ªãÁªçÂ¶Ç‰ΩïÊõ¥Â•ΩÂú∞ÂèÇ‰∏éÂà∞ HttpRunner ÁöÑÂºÄÂèëÂÖ±Âª∫","ref":"/docs/contribution-guidelines/","tags":"","title":"Ë¥°ÁåÆÊåáÂçó"},{"body":"Gold Sponsor \n ÈúçÊ†ºÊ≤ÉÂÖπÊµãËØïÂºÄÂèëÂ≠¶Á§æÊòØ‰∏öÁïåÈ¢ÜÂÖàÁöÑÊµãËØïÂºÄÂèëÊäÄÊúØÈ´òÁ´ØÊïôËÇ≤ÂìÅÁâåÔºåÈö∂Â±û‰∫éÊµãÂêßÔºàÂåó‰∫¨ÔºâÁßëÊäÄÊúâÈôêÂÖ¨Âè∏ „ÄÇÂ≠¶Èô¢ËØæÁ®ãÁî±‰∏ÄÁ∫øÂ§ßÂéÇÊµãËØïÁªèÁêÜ‰∏éËµÑÊ∑±ÊµãËØïÂºÄÂèë‰∏ìÂÆ∂ÂèÇ‰∏éÁ†îÂèëÔºåÂÆûÊàòÈ©±Âä®„ÄÇËØæÁ®ãÊ∂µÁõñ web/app Ëá™Âä®ÂåñÊµãËØï„ÄÅÊé•Âè£ÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÂÆâÂÖ®ÊµãËØï„ÄÅÊåÅÁª≠ÈõÜÊàê/ÊåÅÁª≠‰∫§‰ªò/DevOpsÔºåÊµãËØïÂ∑¶Áßª\u0026Âè≥Áßª„ÄÅÁ≤æÂáÜÊµãËØï„ÄÅÊµãËØïÂπ≥Âè∞ÂºÄÂèë„ÄÅÊµãËØïÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåÂ∏ÆÂä©ÊµãËØïÂ∑•Á®ãÂ∏àÂÆûÁé∞ÊµãËØïÂºÄÂèëÊäÄÊúØËΩ¨Âûã„ÄÇÈÄöËøá‰ºòÁßÄÁöÑÂ≠¶Á§æÂà∂Â∫¶ÔºàÂ•ñÂ≠¶Èáë„ÄÅÂÜÖÊé®ËøîÂ≠¶Ë¥π„ÄÅË°å‰∏öÁ´ûËµõÁ≠âÂ§öÁßçÊñπÂºèÔºâÊù•ÂÆûÁé∞Â≠¶Âëò„ÄÅÂ≠¶Á§æÂèäÁî®‰∫∫‰ºÅ‰∏öÁöÑ‰∏âÊñπÂÖ±Ëµ¢„ÄÇ\n  ËøõÂÖ•ÊµãËØïÂºÄÂèëÊäÄÊúØËÉΩÂäõÊµãËØÑ!\n Êàê‰∏∫ËµûÂä©ÂïÜ Â¶ÇÊûú‰Ω†ÊâÄÂú®ÁöÑÂÖ¨Âè∏Êàñ‰∏™‰∫∫‰πüÊÉ≥ÂØπ HttpRunner ËøõË°åËµûÂä©ÔºåÂèØÂèÇËÄÉÂ¶Ç‰∏ãÊñπÊ°àÔºåÂÖ∑‰ΩìÂèØËÅîÁ≥ªÈ°πÁõÆ‰ΩúËÄÖ„ÄÇ\n   Á≠âÁ∫ß ÈáëÁâåËµûÂä©ÂïÜÔºàGold SponsorÔºâ Èì∂ÁâåËµûÂä©ÂïÜÔºàSilver SponsorÔºâ ‰∏™‰∫∫ËµûËµèÔºàPersonal SponsorÔºâ     ÈáëÈ¢ù Ôø•20000/Âπ¥ Ôø•8000/Âπ¥ Ôø•10+ ‰ªªÊÑè   ÊùÉÁõä ÂÖ¨Âè∏ logoÔºàÂ§ßÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md200 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ÂÖ¨Âè∏ logoÔºà‰∏≠ÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md80 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ‰∏™‰∫∫ ID ÂíåÈìæÊé•Â±ïÁ§∫Âú® sponsors.md    ","categories":"","description":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","excerpt":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","ref":"/en/docs/sponsors/","tags":"","title":"Sponsors"},{"body":"ÈáëÁâåËµûÂä©ÂïÜ \n ÈúçÊ†ºÊ≤ÉÂÖπÊµãËØïÂºÄÂèëÂ≠¶Á§æÊòØ‰∏öÁïåÈ¢ÜÂÖàÁöÑÊµãËØïÂºÄÂèëÊäÄÊúØÈ´òÁ´ØÊïôËÇ≤ÂìÅÁâåÔºåÈö∂Â±û‰∫éÊµãÂêßÔºàÂåó‰∫¨ÔºâÁßëÊäÄÊúâÈôêÂÖ¨Âè∏ „ÄÇÂ≠¶Èô¢ËØæÁ®ãÁî±‰∏ÄÁ∫øÂ§ßÂéÇÊµãËØïÁªèÁêÜ‰∏éËµÑÊ∑±ÊµãËØïÂºÄÂèë‰∏ìÂÆ∂ÂèÇ‰∏éÁ†îÂèëÔºåÂÆûÊàòÈ©±Âä®„ÄÇËØæÁ®ãÊ∂µÁõñ web/app Ëá™Âä®ÂåñÊµãËØï„ÄÅÊé•Âè£ÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÂÆâÂÖ®ÊµãËØï„ÄÅÊåÅÁª≠ÈõÜÊàê/ÊåÅÁª≠‰∫§‰ªò/DevOpsÔºåÊµãËØïÂ∑¶Áßª\u0026Âè≥Áßª„ÄÅÁ≤æÂáÜÊµãËØï„ÄÅÊµãËØïÂπ≥Âè∞ÂºÄÂèë„ÄÅÊµãËØïÁÆ°ÁêÜÁ≠âÂÜÖÂÆπÔºåÂ∏ÆÂä©ÊµãËØïÂ∑•Á®ãÂ∏àÂÆûÁé∞ÊµãËØïÂºÄÂèëÊäÄÊúØËΩ¨Âûã„ÄÇÈÄöËøá‰ºòÁßÄÁöÑÂ≠¶Á§æÂà∂Â∫¶ÔºàÂ•ñÂ≠¶Èáë„ÄÅÂÜÖÊé®ËøîÂ≠¶Ë¥π„ÄÅË°å‰∏öÁ´ûËµõÁ≠âÂ§öÁßçÊñπÂºèÔºâÊù•ÂÆûÁé∞Â≠¶Âëò„ÄÅÂ≠¶Á§æÂèäÁî®‰∫∫‰ºÅ‰∏öÁöÑ‰∏âÊñπÂÖ±Ëµ¢„ÄÇ\n  ËøõÂÖ•ÊµãËØïÂºÄÂèëÊäÄÊúØËÉΩÂäõÊµãËØÑ!\n Êàê‰∏∫ËµûÂä©ÂïÜ Â¶ÇÊûú‰Ω†ÊâÄÂú®ÁöÑÂÖ¨Âè∏Êàñ‰∏™‰∫∫‰πüÊÉ≥ÂØπ HttpRunner ËøõË°åËµûÂä©ÔºåÂèØÂèÇËÄÉÂ¶Ç‰∏ãÊñπÊ°àÔºåÂÖ∑‰ΩìÂèØËÅîÁ≥ªÈ°πÁõÆ‰ΩúËÄÖ„ÄÇ\n   Á≠âÁ∫ß ÈáëÁâåËµûÂä©ÂïÜÔºàGold SponsorÔºâ Èì∂ÁâåËµûÂä©ÂïÜÔºàSilver SponsorÔºâ ‰∏™‰∫∫ËµûËµèÔºàPersonal SponsorÔºâ     ÈáëÈ¢ù Ôø•20000/Âπ¥ Ôø•8000/Âπ¥ Ôø•10+ ‰ªªÊÑè   ÊùÉÁõä ÂÖ¨Âè∏ logoÔºàÂ§ßÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md200 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ÂÖ¨Âè∏ logoÔºà‰∏≠ÔºâÂíåÈìæÊé•Â±ïÁ§∫Âú® README.md80 Â≠óÁöÑÂÆ£‰º†ÊñáÊ°à ‰∏™‰∫∫ ID ÂíåÈìæÊé•Â±ïÁ§∫Âú® sponsors.md    ","categories":"","description":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","excerpt":"Thank you to all our sponsors! ‚ú®üç∞‚ú®","ref":"/docs/sponsors/","tags":"","title":"ËµûÂä©ÂïÜ"},{"body":"2022.02.09ÔºåÊàëÂèëËµ∑‰∫ÜÈ¶ñËΩÆÈù¢Âêë HttpRunner Áî®Êà∑ÁöÑË∞ÉÁ†îÈóÆÂç∑ÔºåÊà™Ëá≥ÂΩìÂâçÔºåÂÖ±Êî∂ÈõÜÂà∞ 252 ‰ªΩÊúâÊïàÈóÆÂç∑„ÄÇÂú®Ê≠§ÈùûÂ∏∏ÊÑüË∞¢ÊâÄÊúâÂ°´ÂÜôÈóÆÂç∑ÁöÑÊúãÂèã‰ª¨ÔºåÊÑüË∞¢‰Ω†‰ª¨ÁöÑËÆ§ÂèØÂíåÂª∫ËÆÆÔºÅ\nÊàëÊúÄËøë‰πüËä±‰∫ÜÂåÖÊã¨Âë®Êú´Âú®ÂÜÖÁöÑÊï¥Êï¥ 3 Â§©Êó∂Èó¥ÈÄê‰∏ÄÈòÖËØª‰∫ÜÂ§ßÂÆ∂Â°´ÂÜôÁöÑÂÜÖÂÆπÔºåÂπ∂ÂØπÂÜÖÂÆπËøõË°å‰∫ÜÊï¥ÁêÜÊ±áÊÄªÔºåÊúÄÁªàÂΩ¢Êàê‰∫ÜËøô‰ªΩÁî®Êà∑Ë∞ÉÁ†îÊä•Âëä„ÄÇ\nÊú¨Êä•ÂëäÂàÜ‰∏∫‰∏â‰∏™ÈÉ®ÂàÜÔºöÂÆ¢ËßÇÁªüËÆ°Êï∞ÊçÆ„ÄÅ‰∏ªËßÇËØÑ‰ª∑ÂèäÂª∫ËÆÆ„ÄÅHttpRunner ÁöÑÂàùÊ≠•ËßÑÂàí„ÄÇÊñáÊú´‰ºöÂÜçËØ¥Êòé‰∏ãÊ†∏ÂøÉÁî®Êà∑Áæ§ÁöÑÂª∫ËÆæÊÉÖÂÜµ„ÄÇ\nÂÆ¢ËßÇÁªüËÆ°Êï∞ÊçÆ ËøôÈÉ®ÂàÜÊòØÈÄâÊã©È¢òÔºåÂèØ‰ª•ÊØîËæÉÂ•ΩÂú∞Ëé∑ÂæóÂá∫ÂêÑ‰∏™Áª¥Â∫¶ÁöÑÁªüËÆ°Êï∞ÊçÆ„ÄÇ\n‰Ω†ÂΩìÂâç‰ΩøÁî®ÁöÑ HttpRunner ÁâàÊú¨Ôºü HttpRunner ÊúÄÂºÄÂßãÊòØ‰ΩøÁî® Python ÂºÄÂèëÁöÑÔºåËÄåÂΩìÂâçÈááÁî® Golang ÂºÄÂèëÁöÑ HttpRunner+ ËøòÊú™ÂºÄÂßãÊé®ÂπøÔºåÂõ†Ê≠§‰ΩøÁî® Python ÁâàÁöÑÁî®Êà∑Âç†ÊØî 95.2%ÔºåÁ¨¶ÂêàÈ¢ÑÊúü„ÄÇ\nÂú® Python ÁâàÊú¨‰∏≠ÔºåÂèØ‰ª•ÁúãÂá∫ 74.2% ÁöÑÁî®Êà∑Â∑≤ÁªèÂú®‰ΩøÁî® HttpRunner v3.x ‰∫ÜÔºå‰ΩÜËøòÊúâËøë 20% ÁöÑÁî®Êà∑Âú®‰ΩøÁî® v2.xÔºåÁîöËá≥ v1.x„ÄÇ‰ªéÁî®Êà∑ÁöÑÈóÆÁ≠îÈ¢ò‰∏≠Ôºå‰πüÊúâ‰∏çÂ∞ëÁî®Êà∑Ë°®Êòé‰∫ÜÊõ¥ÂñúÊ¨¢ v2.x ÁöÑÂΩ¢Âºè„ÄÇ\nÂêéÁª≠ÔºåGolang ÁâàÁöÑ HttpRunner+ Â∞Ü‰ºöÊòØÈáçÁÇπÊäïÂÖ•ÁöÑÊñπÂêëÔºåÂäüËÉΩÂ±ÇÈù¢Èô§‰∫ÜË¶ÜÁõñÂéü Python ÁâàÂ∑≤ÊúâÁöÑÂäüËÉΩÂ§ñÔºåËøò‰ºöÂú®ÁΩëÁªúÂçèËÆÆ„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÁ≠âÊñπÈù¢ËøõË°åÊõ¥Â§öÁöÑÊãìÂ±ï„ÄÇ‰ΩÜÂ§ßÂÆ∂ÂèØ‰ª•ÊîæÂøÉÔºåHttpRunner+ ËôΩÁÑ∂ÊòØÈááÁî® Golang ÂºÄÂèëÔºå‰ΩÜÂú®‰ΩøÁî®ÊñπÂºèÊñπÈù¢‰ºö‰∏éÂéü Python ÁâàÂü∫Êú¨‰øùÊåÅ‰∏ÄËá¥ÔºåËÄå‰∏îËá™ÂÆö‰πâÂáΩÊï∞ÂêéÁª≠‰ºöÊîØÊåÅÂ§öÁßç‰∏ªÊµÅÁöÑÁºñÁ®ãËØ≠Ë®ÄÔºàGo/Python/Java Á≠âÔºâÔºåÂõ†Ê≠§‰∏çÈúÄË¶ÅÁî®Êà∑ÂÖ∑Â§á Golang ÁöÑÂºÄÂèëËÉΩÂäõ„ÄÇÂêåÊó∂ÔºåËÄÉËôëÂà∞ÂæàÂ§öÁî®Êà∑ÂÖ∑ÊúâÂü∫‰∫é Python Áâà HttpRunner ËøõË°å‰∫åÊ¨°ÂºÄÂèëÁöÑËØâÊ±ÇÔºåÂõ†Ê≠§ Python ÁâàÁöÑ v3.x ‰πü‰ºöÊåÅÁª≠ËøõË°åÁª¥Êä§„ÄÇ\n‰Ω†ÂØπÂΩìÂâç‰ΩøÁî®ÁöÑ HttpRunner Êï¥‰ΩìÊª°ÊÑèÂ∫¶ËØÑÂàÜÔºü HttpRunner ÂΩìÂâçÊï¥‰ΩìÊª°ÊÑèÂ∫¶Âπ≥ÂùáÂàÜ 4.3„ÄÇÊ¨£ÂñúÁöÑÊòØÂ§ßÂÆ∂ÊôÆÈÅçÁªôÂá∫ÁöÑËØÑÂàÜÈÉΩÊòØ 4 ÊòüÂíå 5 ÊòüÔºåÊ≤°ÊúâÁªôÂá∫ 1 ÊòüÂíå 2 ÊòüÁöÑÁî®Êà∑ÔºåÂú®Ê≠§ÈùûÂ∏∏ÊÑüË∞¢Â§ßÂÆ∂ÁöÑËÆ§ÂèØÂíåÈºìÂä±ÔºÅ\n‰Ω†ÈáçÁÇπÂÖ≥Ê≥®ÁöÑ‰ΩøÁî®Âú∫ÊôØÊúâÂì™‰∫õÔºü Â§ßÂÆ∂ÂÖ≥Ê≥®ÁöÑ‰ΩøÁî®Âú∫ÊôØ‰∏ªË¶ÅËÅöÁÑ¶Âú®Êé•Âè£Ëá™Âä®ÂåñÊµãËØï„ÄÅÊÄßËÉΩÊµãËØï„ÄÅÁ∫ø‰∏äÁõëÊéß Á≠âÔºåËøô‰πüÊòØ‰πãÂâç HttpRunner È°πÁõÆÁöÑÊ†∏ÂøÉÁõÆÊ†á„ÄÇ\nËÄåÂú®Êï∞Â≠ó‰ΩìÈ™åÁõëÊµãÔºàDEMÔºâÊñπÈù¢ÔºåÂ§ßÂÆ∂ÁöÑÂÖ≥Ê≥®Â∫¶ÊòéÊòæÂÅè‰ΩéÔºà4.2%ÔºâÔºå‰º∞ËÆ°ÊòØÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãËøòÊòØ‰∏Ä‰∏™ÊØîËæÉÊñ∞ÁöÑÊ¶ÇÂøµÔºåÂæàÂ§öÂÖ¨Âè∏ËøòÊ≤°ÊúâÂºÄÂßãÈáçËßÜ„ÄÇ‰ΩÜÂèØ‰ª•ÊòéÁ°ÆÂëäËØâÂ§ßÂÆ∂ÁöÑÊòØÔºåÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÔºàDEMÔºâÂÖ∑ÊúâÈùûÂ∏∏Â§ßÁöÑ‰∏öÂä°‰ª∑ÂÄºÊî∂ÁõäÔºåÂêéÁª≠ HttpRunner+ ‰πü‰ºöÈáçÁÇπÂä†Âº∫ËøôÊñπÈù¢ÁöÑËÉΩÂäõÂª∫ËÆæÔºåÂπ∂‰∏î‰ºöÂàÜ‰∫´ËæÉÂ§öÁöÑÊïôÁ®ãÊñáÊ°£„ÄÅÊàêÂäüÊ°à‰æãÔºåÁîöËá≥ÂÖ¨ÂºÄËØæÁ≠â„ÄÇ\n‰Ω†ÊòØÂê¶ÊÑøÊÑè‰∏é HttpRunner ÂÖ±ÂàõÊàêÂäüÊ°à‰æãÔºüÔºàÂú® HttpRunner ÂÆòÁΩë‰∏äÂÆ£‰º†Â±ïÁ§∫Ôºâ ÊÑøÊÑè‰∏é HttpRunner ÂÖ±ÂàõÊàêÂäüÊ°à‰æãÁöÑÁî®Êà∑ËææÂà∞‰∫Ü 60.1%ÔºåÁùÄÂÆû‰ª§ÊàëÊÑüÂä®„ÄÇ\nÂú®Ê≠§Êàë‰πüÊÉ≥ËØ¥ÊòéÁöÑÊòØÔºåÂÖ±ÂàõÊàêÂäüÊ°à‰æãÊòØ‰∏Ä‰∏™ÂèåËµ¢ÁöÑ‰∫ãÊÉÖÔºåÂêéÁª≠ HttpRunner ‰ºöÂä†Â§ßÂºÄÊ∫êÈ°πÁõÆËøêËê•ÂäõÂ∫¶„ÄÇÂØπHttpRunner ËÄåË®ÄÔºåÊàë‰ª¨ÊúüÊúõËÉΩËß¶ËææÊõ¥Â§öÁî®Êà∑ÔºåÂ∞ÜÂºÄÊ∫êÈ°πÁõÆÂÅöÂ§ßÂÅöÂº∫„ÄÇÂØπ‰ºÅ‰∏öËÄåË®ÄÔºåHttpRunner ÂèØ‰ª•Êàê‰∏∫‰∏Ä‰∏™ÂìÅÁâåÂÆ£‰º†ÁöÑÊ∏†ÈÅìÔºåÂõ¢ÈòüÂÆ£‰º†ÂíåÊãõËÅòÂπøÂëäÈÉΩÊòØÊ¨¢ËøéÁöÑ„ÄÇ\nÊé•‰∏ãÊù•Êàë‰ºöÊï¥ÁêÜ‰∏ãÂÖ±ÂàõÊàêÂäüÊ°à‰æãÁöÑÊñπÊ°àÂíåËÆ°ÂàíÔºåÁÑ∂ÂêéË∑üÊúâÊÑèÂêëÁöÑÊúãÂèãËÅîÁ≥ªËøõË°åÁªÜËäÇÊ≤üÈÄö„ÄÇÁúãÂà∞ËøôÈáåÊÑüÂÖ¥Ë∂£ÁöÑÊúãÂèãÔºå‰πüÂèØ‰ª•‰∏ªÂä®Ë∑üÊàëËÅîÁ≥ª„ÄÇ\n‰∏ªËßÇËØÑ‰ª∑ÂèäÂª∫ËÆÆ ËøôÈÉ®ÂàÜÊòØÈóÆÁ≠îÈ¢òÔºåÂèØ‰ª•ÊúÄÁúüÂÆûÂáÜÁ°ÆÂú∞Ëé∑ÂæóÁî®Êà∑ÂØπ HttpRunner ÁöÑ‰ΩøÁî®ÊÑüÂèóÔºåÂêåÊó∂‰πüÂèØ‰ª•ÊØîËæÉÂ•ΩÂú∞‰Ωú‰∏∫Ê†∏ÂøÉÁî®Êà∑Áæ§‰ΩìÁöÑÁ≠õÈÄâÊù°‰ª∂„ÄÇ\nÊúÄÂºÄÂßãÊàëÊÉ≥ËøáÈááÁî®Â§öÈÄâÈ¢òÁöÑÊñπÂºèÔºåÊàëËá™Â∑±ÁΩóÂàó‰∏Ä‰∫õÁÇπÔºåËÆ©Â§ßÂÆ∂ËøõË°åÈÄâÊã©„ÄÇËøôÊ†∑ÁöÑÂ•ΩÂ§ÑÊòØÈóÆÂç∑Â°´ÂÜôÂíåÁªüËÆ°ÈÉΩÈùûÂ∏∏Êñπ‰æøÔºåÁî®Êà∑ÂíåÊàëÈÉΩ‰ºöËΩªÊùæÂæóÂ§ö„ÄÇ‰ΩÜÂùèÂ§ÑÂ∞±ÊòØÊàë‰∏™‰∫∫ÁöÑ‰∏ªËßÇÂà§Êñ≠‰ºö‰∏•ÈáçÂΩ±ÂìçÂà∞Áî®Êà∑ÁöÑËØÑ‰ª∑Ôºå‰ªéËÄåÊé©Áõñ‰∫ÜÊúÄÁúüÂÆûÁöÑÁî®Êà∑Â£∞Èü≥„ÄÇÂè¶Â§ñËøôÁßçÊñπÂºè‰πüÊ≤°Ê≥ïÂå∫ÂàÜÂá∫ÁúüÊ≠£ÁöÑÈìÅÊùÜÁî®Êà∑Ôºå‰∏çÂà©‰∫éÊ†∏ÂøÉÁî®Êà∑Áæ§‰ΩìÁöÑÁ≠õÈÄâ„ÄÇ\nÂÆûÈôÖ‰∏äÔºåËøôÈÉ®ÂàÜÊï¥ÁêÜÂ∑•‰ΩúÁöÑÁ°Æ‰πüËä±Ë¥π‰∫ÜÊàëÈùûÂ∏∏Â§öÁöÑÊó∂Èó¥Ôºå‰∏ªË¶ÅÊòØË¶ÅÂØπÂ§ßÂÆ∂Â°´ÂÜôÁöÑÂÜÖÂÆπËøõË°åÁªìÊûÑÂåñÂíåÂΩíÁ±ªÔºå‰ªéËÄåÁ≠õÈÄâÂá∫È´ò‰ºòÂÖ±ÊÄßÈóÆÈ¢ò„ÄÇ‰ΩÜÊúÄÂêé‰ªéÂÆûÈôÖÁªìÊûúÊù•ÁúãÔºåËøôÈÉ®ÂàÜÊäïÂÖ•ÁúüÁöÑÈùûÂ∏∏ÂÄºÂæóÔºÅ\nÁªüËÆ°ËØ¥ÊòéÔºöÁªüËÆ°Ê¨°Êï∞ÈÉΩÊòØÂü∫‰∫éÈíàÂØπÂÖ∑‰ΩìÁª¥Â∫¶ÁöÑËØÑ‰ª∑ÔºåÁ¨ºÁªüÁöÑÊèèËø∞‰∏çËÆ°ÂÖ•ÁªüËÆ°Ôºå‰æãÂ¶Ç„ÄåÈùûÂ∏∏Â•ΩÁî®„Äç„ÄÅ„ÄåÈÉΩÂñúÊ¨¢„ÄçÁ≠â„ÄÇÂêåÊó∂Âçï‰∏™Áî®Êà∑ÈíàÂØπÂ§ö‰∏™Áª¥Â∫¶ÁöÑÂÖ∑‰ΩìËØÑ‰ª∑ÔºåÈÉΩ‰ºöËÆ°ÂÖ•Âà∞ÁªüËÆ°Êï∞ÊçÆ„ÄÇ Â¶ÇÊûúÂ§ßÂÆ∂ÊúüÊúõÁúãÂà∞ÂéüÂßãÁöÑÈóÆÂç∑ÂÜÖÂÆπÔºåÂèØÂú®ÂÖ¨‰ºóÂè∑ HttpRunner ‰∏≠ÂèëÈÄÅ„ÄåÈ¶ñËΩÆÈóÆÂç∑ÂéüÂßãÂÜÖÂÆπ„ÄçËé∑ÂæóÊü•ÁúãÈìæÊé•ÔºàÂ∑≤ÂéªÈô§Áî®Êà∑‰∏™‰∫∫Áõ∏ÂÖ≥‰ø°ÊÅØÔºâ„ÄÇ\nÂú®ÂΩìÂâç‰ΩøÁî®ÁöÑ HttpRunner ÁâàÊú¨‰∏≠Ôºå‰Ω†ÊúÄÂñúÊ¨¢ÁöÑÂäüËÉΩÊúâÂì™‰∫õÔºüüëç ‰ªéÁªüËÆ°Êï∞ÊçÆÊù•ÁúãÔºåHttpRunner Áî®Êà∑ÊúÄÂñúÊ¨¢ÁöÑ‰∏âÂ§ßÊñπÈù¢ÂàÜÂà´‰∏∫ÔºöËÑöÊú¨ËÉΩÂäõ„ÄÅÊòìÁî®ÊÄß„ÄÅÊï¥‰ΩìËÆæËÆ°ÔºõÂπ∂‰∏îÁ•®Êï∞ÊòæËëóÈ´ò‰∫éÂÖ∂ÂÆÉÊñπÈù¢„ÄÇ\nÂú®ÁªÜÂàÜÂäüËÉΩÂ±ÇÈù¢ÔºåHttpRunner Áî®Êà∑ÊúÄÂñúÊ¨¢ÁöÑÂäüËÉΩÁÇπ‰∏∫ÔºöÁî®‰æãÁîüÊàêÔºàhar2caseÔºâ„ÄÅÂä®ÊÄÅÂáΩÊï∞Ôºàdebugtalk.pyÔºâ„ÄÅÊï¥‰ΩìËÆæËÆ°ÔºàÁî®‰æãÂàÜÂ±ÇÔºâ„ÄÇ\nÂú®ÂΩìÂâç‰ΩøÁî®ÁöÑ HttpRunner ÁâàÊú¨‰∏≠Ôºå‰Ω†ÊúÄÊÉ≥ÂêêÊßΩÁöÑÁÇπÊúâÂì™‰∫õÔºüüëé Âú®ÂêêÊßΩÁÇπÊñπÈù¢ÔºåÈ¶ñÂΩìÂÖ∂ÂÜ≤ÊòØÊñáÊ°£ÊåáÂºïÔºåÁ•®Êï∞ÊòæËëóÈ´ò‰∫éÂÖ∂ÂÆÉÁª¥Â∫¶„ÄÇÁÑ∂ÂêéÂÖ∂ÂÆÉÁöÑÂêêÊßΩÁÇπ‰∏ªË¶ÅËÅöÈõÜÂú®ÔºöÊòìÁî®ÊÄßÔºàÁº∫‰πè UI ÁïåÈù¢Ôºâ„ÄÅÈóÆÈ¢òÊéíÊü•ÔºàÊä•Èîô‰ø°ÊÅØÊéíÊü•ÂÆö‰ΩçÔºâ„ÄÅÊµÅÁ®ãÊéßÂà∂„ÄÅÊÄßËÉΩÊµãËØïÔºàlocust È∏°ËÇãÔºâÁ≠âÊñπÈù¢„ÄÇ\n‰Ω†ÊúÄÊúüÊúõ HttpRunner Â¢ûÂä†ÁöÑÂäüËÉΩÊúâÂì™‰∫õÔºüüëª Âú®ÊúüÂæÖÊñ∞Â¢ûÁöÑÂäüËÉΩÂíåÊîπËøõÊñπÈù¢ÔºåÊõ¥È´òÁöÑÊòìÁî®ÊÄßÔºàUI ÁïåÈù¢Ôºâ„ÄÅÊõ¥ÂÆåÂñÑÁöÑÊÄßËÉΩÊµãËØï„ÄÅÊõ¥‰∏∞ÂØåÁöÑÁΩëÁªúÂçèËÆÆ ÊòØÂëºÂ£∞ÊúÄÈ´òÁöÑ‰∏â‰∏™ÊñπÂêë„ÄÇÂêåÊó∂Âú®È°πÁõÆÊîØÊåÅÂ±ÇÈù¢ÔºåÊñáÊ°£„ÄÅÊ°à‰æã„ÄÅdemo ‰πüÊòØÂ§ßÂÆ∂ÊôÆÈÅçÊúüÊúõÊîπËøõÁöÑ„ÄÇ\nHttpRunner ÁöÑÂàùÊ≠•ËßÑÂàí Âü∫‰∫éÊú¨ËΩÆÁî®Êà∑Ë∞ÉÁ†îÁöÑÁªìÊûúÔºåÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ HttpRunner ÂÖ∑Êúâ‰∏Ä‰∫õ‰∫ÆÁÇπÂíå‰ºòÂäøÔºå‰ΩÜÂêåÊó∂ËøòÂ≠òÂú®ÈùûÂ∏∏Â§öÁöÑ‰∏çË∂≥„ÄÇÊàë‰ª¨‰ºöËÆ§ÁúüÂê¨ÂèñÁî®Êà∑ÁöÑÂèçÈ¶àÔºåÂπ∂ËøõË°åÁõ∏Â∫îÁöÑÊîπËøõÔºåËøô‰πüÊòØÊàëÂèëËµ∑Êú¨ËΩÆÁî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑ÁöÑÂàùË°∑„ÄÇ\nËøôÈáåÂÖàÁΩóÂàó‰∏Ä‰∫õÂàùÊ≠•ÁöÑËßÑÂàíÔºåÂêéÁª≠Êàë‰ºöÂÜçÂèëÂ∏É‰∏Ä‰ªΩÊõ¥ÂÆåÊï¥ÁöÑËßÑÂàíÊñáÊ°£„ÄÇ\n1„ÄÅÊâøËØ∫Ê∞∏‰πÖ‰øùÊåÅÂºÄÊ∫êÂÖçË¥πÔºÅ Âú®ÈóÆÂç∑‰∏≠ÊúâÊúãÂèãÊèêÂà∞‰∫ÜËøôÊ†∑ÁöÑÊúüÊúõÔºåËôΩÁÑ∂Âè™Êúâ‰∏Ä‰ΩçÔºå‰ΩÜÊàëÊÉ≥Âú®Ê≠§ËøõË°å‰∏ãÈÉëÈáçÁî≥Êòé„ÄÇ\nHttpRunnerÔºå‰ª•ÂèäÂΩìÂâçÈáçÁÇπÊäïÂÖ•ÁöÑ HttpRunner+ÔºåÊâøËØ∫‰ºöÊ∞∏‰πÖ‰øùÊåÅÂºÄÊ∫êÂÖçË¥π„ÄÇÂπ∂‰∏îÂú®ÂºÄÊ∫êÂçèËÆÆ‰∏äÔºåÊàë‰ª¨ÈÄâÊã©‰∫ÜÈùûÂ∏∏ÂÆΩÊùæÁöÑ Apache-2.0 ÂçèËÆÆÔºå‰∏çÁÆ°ÊòØÂØπ‰∏™‰∫∫ËøòÊòØÂïÜ‰∏öÂåñÂÖ¨Âè∏ÔºåÈÉΩÂçÅÂàÜÂèãÂ•ΩÔºåÂ§ßÂÆ∂‰∏çÈúÄË¶ÅÊúâ‰ªª‰ΩïÈ°æËôë„ÄÇ\n‰ΩÜÂêåÊó∂ÈúÄË¶ÅËØ¥ÊòéÁöÑÊòØÔºåHttpRunner Ëá™Ë∫´Âú®‰øùÊåÅÂºÄÊ∫êÂÖçË¥πÁöÑÊÉÖÂÜµ‰∏ãÔºå‰∏çÊéíÈô§Êàë‰ª¨‰ºöÂü∫‰∫é HttpRunner Êèê‰æõ‰∏Ä‰∫õÂïÜ‰∏öÂåñÁöÑÂ¢ûÂÄºÊúçÂä°ÔºåÂêéÁª≠‰πüÂèØËÉΩ‰ºöÊúâ‰∏Ä‰∫õÂïÜ‰∏öÂåñÁöÑÂπøÂëä„ÄÇÊúüÊúõÂ§ßÂÆ∂ËÉΩÂ§öÂ§öÁêÜËß£ÔºåÂú®Êñπ‰æøÁöÑÊó∂ÂÄô‰πüÊúüÂæÖÂ§ßÂÆ∂ËÉΩÁªô‰∫àÊîØÊåÅÔºåÊØïÁ´üÁ∫ØÁ≤πÁöÑÈù†Áà±ÂèëÁîµÊòØÊó†Ê≥ïÈïø‰πÖÁöÑÔºåËÉΩÊâæÂà∞‰∏Ä‰∫õÂà©ÁõäÂπ≥Ë°°ÁÇπÔºå‰∫íÊÉ†‰∫íÂà©ÊâçËÉΩËµ∞ÂæóÊõ¥ËøúÔºÅ\n2„ÄÅHttpRunner ÂºÄÊ∫êÁ§æÂå∫Âª∫ËÆæ Âú®ÈíàÂØπ HttpRunner ÁöÑÂêêÊßΩÂíåÊúüÊúõÊîπËøõÊñπÈù¢ÔºåÁî®Êà∑ÊîØÊåÅ„ÄÅÊñáÊ°£Ê°à‰æãÂª∫ËÆæ„ÄÅ‰∫§ÊµÅÈÄîÂæÑ Ë¢´ÊèêÂèäÁöÑÊØîËæÉÂ§öÔºåËøôÁöÑÁ°ÆÊòØÂΩìÂâç HttpRunner ÂÅöÂæóÂæà‰∏çÂ•ΩÔºå‰∏•ÈáçÈòªÁ¢ç HttpRunner ÊôÆÂèäÂíåÂèëÂ±ïÁöÑÈóÆÈ¢ò„ÄÇ\nÊé•‰∏ãÊù•ÔºåHttpRunner ‰ºöÈáçÁÇπÂä†Âº∫ÊñáÊ°£Ôºà‰∏≠Êñá‰ºòÂÖàÔºâÁöÑÂª∫ËÆæÔºåÂπ∂‰∏î‰ºöËÆæËÆ°‰∏Ä‰∫õÊ°à‰æãÔºåÊñπ‰æøÁî®Êà∑Âø´ÈÄü‰∏äÊâãÂÆûË∑µ„ÄÇÁîöËá≥Êàë‰ª¨‰πüÂú®ËÄÉËôëÂèØ‰ª•ÂÆöÊúüÊêû‰∏Ä‰∫õ HttpRunner ÁöÑÂÖ¨ÂºÄËØæÔºåÁõ¥Êí≠ËøõË°åÊ°à‰æãÊºîÁ§∫ÔºåÂØπÊüê‰∫õÊñ∞ÊâãÁî®Êà∑ÂèØËÉΩ‰ºöÊõ¥ÂèãÂ•Ω‰∫õ„ÄÇ\nÂêåÊó∂ÔºåÊàëÊúÄËøë‰πüÂú®ËÄÉËôëÂª∫ËÆæ HttpRunner Ëá™Ë∫´ÁöÑ‰∫§ÊµÅÁ§æÂå∫ÔºåÊñπ‰æøÁî®Êà∑Êõ¥Â•ΩÂú∞‰∫§ÊµÅÔºåÂèäÊó∂Ëé∑ÂæóÈóÆÈ¢òÁ≠îÁñë„ÄÇÊûÑÂª∫Ê†∏ÂøÉÁî®Êà∑Áæ§ÊòØÂΩìÂâçÁ¨¨‰∏ÄÈò∂ÊÆµÂú®ÂÅöÁöÑÂ∑•‰ΩúÔºå‰ΩÜÊõ¥Â§öÂÖ∑‰ΩìÂΩ¢ÂºèÊàëËøòÂú®Êé¢Á¥¢‰∏≠ÔºåÊ†∏ÂøÉÁõÆÊ†áÂ∞±ÊòØË¶ÅËß£ÂÜ≥Â§ßÂÆ∂Âú®ÈóÆÂç∑‰∏≠ÊèêÂà∞ÁöÑÁõ∏ÂÖ≥ÈóÆÈ¢ò„ÄÇ\n3„ÄÅÂü∫‰∫é HttpRunner ÁöÑ UI ÂÆ¢Êà∑Á´Ø‰∫ßÂìÅ ‰πãÂâçÊàëÂú®ÊàëÁöÑ 2021 Âπ¥ÁªàÊÄªÁªì‰∏≠ÊúâÁÆÄÂçï‰ªãÁªçËøáÔºåÊàë‰ª¨Âõ¢ÈòüÂΩìÂâçÂú®Âü∫‰∫é HttpRunner+ Á†îÂèë‰∏ÄÊ¨æÂïÜ‰∏öÂåñÁöÑÊ°åÈù¢ÂÆ¢Êà∑Á´ØÊÄßËÉΩÊ£ÄÊµãÔºàÂéãÊµãÔºâÂ∑•ÂÖ∑ÔºåÁÆÄÂçïÊòìÁî®„ÄÅÂäüËÉΩÂº∫Â§ßÊòØËØ•‰∫ßÂìÅÊúÄÊ†∏ÂøÉÁöÑÁõÆÊ†á„ÄÇ\nËôΩÁÑ∂Ê†∏ÂøÉÁõÆÊ†áÊòØÂéãÊµãÔºå‰ΩÜÂéãÊµãÁöÑÂü∫Á°ÄÊòØÊé•Âè£ÊµãËØïÔºåÂõ†Ê≠§ËØ•‰∫ßÂìÅÂêåÊ†∑‰ºöÂÖ∑ÊúâÊé•Âè£Ëá™Âä®ÂåñÊµãËØïÁöÑÊâÄÊúâÂäüËÉΩ„ÄÇËÄåÂú®ÂïÜ‰∏öÂåñÊñπÈù¢ÔºåÊàë‰ª¨ÊúüÊúõËÉΩÊúâÊõ¥ÂπøÂ§ßÁöÑÁî®Êà∑Áæ§‰ΩìÔºåÂõ†Ê≠§ÁªùÂ§ßÂ§öÊï∞Âü∫Á°ÄÂäüËÉΩÈÉΩ‰ºöÂÖçË¥πÂºÄÊîæÁªôÁî®Êà∑„ÄÇ\nÂ§ßÊ¶ÇÂú®‰ªäÂπ¥ 3 Êúà‰ªΩÔºåÊàë‰ª¨ÁöÑ UI ÂÆ¢Êà∑Á´ØÂ∑•ÂÖ∑ alpha ÁâàÊú¨‰ºöÂÖàÈù¢Âêë HttpRunner Ê†∏ÂøÉÁî®Êà∑Áæ§ÂºÄÊîæËØïÁî®ÔºåÂêéÁª≠‰ºöÈÄêÊ≠•ÂºÄÊîæÁªôÊõ¥Â§öÁî®Êà∑„ÄÇÁõ∏‰ø°ÂêéÁª≠Âú®Êúâ‰∫ÜËØ•Ê¨æ UI ÂÆ¢Êà∑Á´ØÂ∑•ÂÖ∑‰πãÂêéÔºåÈóÆÂç∑‰∏≠ÊôÆÈÅçÊèêÂèäÁöÑÊòìÁî®ÊÄßÔºàÁº∫‰πè UI Êìç‰ΩúÁïåÈù¢Ôºâ„ÄÅÊÄßËÉΩÊµãËØï‰∏çÂÆåÂñÑÁ≠âÈóÆÈ¢òÂ∞±ÂèØ‰ª•ÂæóÂà∞ËæÉÂ•ΩÁöÑËß£ÂÜ≥„ÄÇ\n4„ÄÅHttpRunner+ ÁöÑËø≠‰ª£ÊñπÂêë È¶ñÂÖàÔºåHttpRunner+ ‰ºöÂª∂Áª≠‰πãÂâçÁöÑÈ°πÁõÆÁõÆÊ†áÔºåÊâìÈÄ†Êàê‰∏Ä‰∏™Èù¢Âêë HTTP(S) ÁöÑ‰∏ÄÁ´ôÂºèÊµãËØïËß£ÂÜ≥ÊñπÊ°à„ÄÇÂõ†Ê≠§Â§ßÂÆ∂Âú®ÈóÆÂç∑‰∏≠ÂèçÈ¶àÁöÑÂÖ±ÊÄßÈóÆÈ¢òÔºàÁ•®Êï∞\u003e=3ÔºâÊàë‰ª¨ÈÉΩ‰ºöÊåâÁÖß‰ºòÂÖàÁ∫ßËøõË°åËß£ÂÜ≥„ÄÇ\nÂÖ∂Ê¨°ÔºåHttpRunner+ Âú®Â∫îÁî®Âú∫ÊôØ‰∏ä‰ºöËøõË°åÊõ¥Â§öÁöÑÊãìÂ±ïÂíåÁ™ÅÁ†¥ÔºåÂåÖÊã¨Ë¶ÜÁõñÊõ¥Â§öÁöÑÁΩëÁªúÂçèËÆÆ„ÄÅÊîØÊåÅÊõ¥ÂÆåÂñÑÁöÑÊÄßËÉΩÊµãËØï„ÄÅËûçÂêàÊï∞Â≠ó‰ΩìÈ™åÁõëÊµãÁ≠âÊõ¥Â§öËÉΩÂäõ„ÄÇ\n‰∏ãÂõæ‰∏≠Â±ïÁ§∫‰∫ÜÂΩìÂâç HttpRunner+ Â∑≤ÁªèÂÖ∑Â§áÁöÑËÉΩÂäõÔºå‰ª•ÂèäËøëÊúüË¶ÅÈáçÁÇπÂÆûÁé∞ÁöÑÂäüËÉΩÁâπÊÄß„ÄÇ\nÊ†∏ÂøÉÁî®Êà∑Áæ§ÁöÑÂª∫ËÆæÊÉÖÂÜµ Âú®È¶ñËΩÆÁî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑‰πãÂêéÔºåÊàëÈÄê‰∏ÄÈòÖËØª‰∫ÜÊî∂ÈõÜÁöÑÊâÄÊúâÈóÆÂç∑ÂÜÖÂÆπÔºåÂπ∂ÂàùÊ≠•‰∏é‰∏ÄÊâπÁî®Êà∑ËøõË°åËÅîÁ≥ªÔºåÁªÑÂª∫‰∫Ü‰∏Ä‰∏™ÂæÆ‰ø°‰∫§ÊµÅÁæ§ÔºåÂΩìÂâçÁæ§ÊàêÂëòÂ§ßÊ¶ÇÊúâ 50+ ÁöÑÊ†∑Â≠ê„ÄÇ\nËøòÊúâ‰∏Ä‰∫õÁî®Êà∑ÁöÑÂ°´ÂÜôË¥®Èáè‰πüÈùûÂ∏∏È´òÔºå‰ΩÜÊúâÁöÑÊòØÊ≤°ÊúâÁïô‰∏ãËÅîÁ≥ªÊñπÂºèÔºåÊúâÁöÑÊòØÂ°´ÂÜôÁöÑËÅîÁ≥ªÊñπÂºèÊó†Ê≥ïÊ∑ªÂä†Â•ΩÂèãÔºåÊúâÁöÑÊòØÊ∑ªÂä†Â•ΩÂèãÁî≥ËØ∑Âêé‰∏ÄÁõ¥Ê≤°ÊúâÈÄöËøáÔºåËøòÊúâÁöÑÊòØÊ∑ªÂä†Â•ΩÂèãÊàêÂäüÂêéÊ≤°Êúâ‰∫§ÊµÅ„ÄÇÂ¶ÇÊûúÂ≠òÂú®Ëøô‰∫õÊÉÖÂÜµÁöÑÁî®Êà∑ÔºåÈ∫ªÁÉ¶ÂÜçË∑üÊàëËÅîÁ≥ª‰∏ã„ÄÇ\nÂè¶Â§ñÊàëÂÜçËØ¥Êòé‰∏ãÔºåÊàëÂπ∂‰∏çÊòØÂú®ÊúâÊÑèÊéßÂà∂Áæ§ÁöÑËßÑÊ®°ÔºåËÄåÊòØÊúüÊúõÂú®Á§æÂå∫Âª∫ËÆæÂàùÊúüËÉΩÁ≠õÈÄâÂá∫‰∏ÄÊâπÁúüÊ≠£ÂñúÊ¨¢ HttpRunnerÔºåÂπ∂ÊÑøÊÑè‰∏ÄËµ∑Â∏ÆÂä© HttpRunner ÊàêÈïøÁöÑÁî®Êà∑„ÄÇÁ≠õÈÄâÊú∫Âà∂ÂèØËÉΩÂ≠òÂú®‰∏ÄÂÆöÁöÑ‰∏ªËßÇÊÄßÔºå‰ΩÜÂ§ßÂÆ∂Â¶ÇÊûúÂéªÁúã‰∏ãÈóÆÂç∑ÁöÑÂéüÂßãÂÜÖÂÆπÔºå‰πüËÆ∏Â∞±‰ºöÊ∏ÖÊ•öÁúüÊ≠£ÁöÑÈìÅÊùÜÁî®Êà∑ÂÖ∑ÊúâÊÄéÊ†∑ÁöÑÁâπÊÄß‰∫Ü„ÄÇ\nÊü•ÁúãÂéüÂßãÈóÆÂç∑ÂÜÖÂÆπÁöÑÊñπÂºèÔºöÂú®ÂÖ¨‰ºóÂè∑ HttpRunner ‰∏≠ÂèëÈÄÅ„ÄåÈ¶ñËΩÆÈóÆÂç∑ÂéüÂßãÂÜÖÂÆπ„ÄçËé∑ÂæóÊü•ÁúãÈìæÊé•ÔºàÂ∑≤ÂéªÈô§Áî®Êà∑‰∏™‰∫∫Áõ∏ÂÖ≥‰ø°ÊÅØÔºâ„ÄÇ\nÊúÄÂêéÔºåÂ¶ÇÊûúËøòÊúâÁâπÂà´ÊÉ≥ËøõÁæ§ÁöÑÁî®Êà∑ÔºåÈÇ£Â∞±ÂÜçÂä†‰∏ãÊàëÂæÆ‰ø°Ôºàleolee023ÔºâÂêßÔºå‰ΩÜÈúÄË¶ÅÂú®Âä†Â•ΩÂèãÁöÑÊó∂ÂÄôÂÅö‰∏ãÁ®çÂæÆËØ¶ÁªÜÁÇπÁöÑËá™Êàë‰ªãÁªçÔºåÂåÖÊã¨ÔºöÂßìÂêç„ÄÅÊâÄÂú®ÂÖ¨Âè∏„ÄÅÊâÄÂú®ÂÖ¨Âè∏‰ΩøÁî® HttpRunner ÁöÑÊÉÖÂÜµ„ÄÇ\n ÊúÄÂêéÁöÑÊúÄÂêéÔºåÈ∫ªÁÉ¶Â§ßÂÆ∂ÂÜçÂ°´‰∏™„ÄêÈóÆÂç∑„ÄëÂêßÔºåÂè™Êúâ‰∏Ä‰∏™ÈóÆÈ¢òÔºåÂú® HttpRunner Ê∞∏‰πÖ‰øùÊåÅÂºÄÊ∫êÂÖçË¥πÁöÑÊÉÖÂÜµ‰∏ãÔºå‰Ω†ÊúÄÊúüÊúõËé∑ÂæóÁöÑÂ¢ûÂÄºÊúçÂä°ÊúâÂì™‰∫õÔºü\nÂÜçÊ¨°ÊÑüË∞¢Â§ßÂÆ∂ÁöÑÁêÜËß£ÂíåÊîØÊåÅÔºÅ\nÈóÆÂç∑ÈìæÊé•Ôºöhttps://wj.qq.com/s2/9708369/b6b2/\n","categories":"","description":"ÊÑüË∞¢‰Ω†ÁöÑ HttpRunner ÁöÑÂÖ≥Ê≥®ÂíåÊîØÊåÅÔºÅ","excerpt":"ÊÑüË∞¢‰Ω†ÁöÑ HttpRunner ÁöÑÂÖ≥Ê≥®ÂíåÊîØÊåÅÔºÅ","ref":"/blog/user-survey-report/","tags":"","title":"HttpRunner È¶ñËΩÆÁî®Êà∑Ë∞ÉÁ†îÊä•ÂëäÔºà2022.02Ôºâ"},{"body":"Â§ßÂÆ∂Â•ΩÔºÅÈùûÂ∏∏ÊÑüË∞¢Â§ßÂÆ∂‰∏ÄÁõ¥‰ª•Êù•ÂØπ HttpRunner ÁöÑÂÖ≥Ê≥®ÂíåÊîØÊåÅÔºÅ\nÂú®ÊàëÁöÑ 2021 Âπ¥ÁªàÊÄªÁªì‰∏≠ÔºåÊàëËØ¥ËøáÊàë‰ªäÂπ¥Â∞Ü‰ºöÈáçÁÇπÊäïÂÖ•Âà∞ HttpRunner ÁöÑÂºÄÂèëËø≠‰ª£ÂíåÁî®Êà∑Á§æÂå∫ËøêËê•ÔºåËøëÊúüÊàë‰πüÂú®Ê¢≥ÁêÜÂÖ∑‰ΩìÁöÑÂ∑•‰ΩúËÆ°ÂàíÔºå‰º∞ËÆ°ÂæàÂø´Â∞±‰ºöÂêåÊ≠•ÁªôÂ§ßÂÆ∂„ÄÇ\nÈ¶ñÂÖàÔºåÊàëÊÉ≥ÂÖàÂª∫Á´ã‰∏Ä‰∏™ HttpRunner ÁöÑÊ†∏ÂøÉÁî®Êà∑‰∫§ÊµÅÁæ§ÔºåËøô‰πüÊòØ‰πãÂâç‰ºóÂ§öÁî®Êà∑ÂëºÂêÅÂ∑≤‰πÖÁöÑÊÉ≥Ê≥ï„ÄÇËøô‰∏™Áæ§Ë∞¢ÁªùÂêπÊ∞¥Ôºå‰ªÖÈôê HttpRunner Áõ∏ÂÖ≥ÁöÑÊäÄÊúØ‰∫§ÊµÅÔºåÂåÖÊã¨Êñ∞ÁâàÊú¨ÂèëÂ∏ÉÂêåÊ≠•„ÄÅÊñ∞ÁâπÊÄßËßÑÂàíËÆæËÆ°„ÄÅÈóÆÈ¢òÂèçÈ¶à„ÄÅÁî®Ê≥ïÂí®ËØ¢„ÄÅÊúÄ‰Ω≥ÂÆûË∑µÂàÜ‰∫´Á≠âÁ≠â„ÄÇÂêéÁª≠ÂæÖÊàë‰ª¨Âü∫‰∫é HttpRunner Á†îÂèëÁöÑÊ°åÈù¢ÂÆ¢Êà∑Á´ØÂéãÊµãÂ∑•ÂÖ∑ÂèëÂ∏ÉÂêéÔºå‰πü‰ºöÁ¨¨‰∏ÄÊó∂Èó¥ÂèëÂ∏ÉÂà∞ËØ•Áî®Êà∑Áæ§‰æõÂ§ßÂÆ∂‰ΩìÈ™åËØïÁî®„ÄÇ\nÈÇ£ÊÄé‰πàÊèêÂçá‰∫§ÊµÅÁæ§ÁöÑË¥®ÈáèÂë¢Ôºü\nÊàëÊÉ≥ÊúÄÂ•ΩÁöÑÊñπÂºèËøòÊòØËÆæÁΩÆ‰∏Ä‰∫õÈó®ÊßõÔºåËôΩÁÑ∂‰ºöÈ∫ªÁÉ¶‰∫õÔºå‰ΩÜÂ∫îËØ•ÊòØÂÄºÂæóÁöÑ„ÄÇÂ¶ÇÊûú‰Ω†ÊúüÊúõÂä†Áæ§ÔºåËØ∑Â°´ÂÜôÁî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑Âπ∂Áïô‰∏ã‰Ω†ÁöÑÂæÆ‰ø°Âè∑Ôºå‰ΩúËÄÖ‰ºöÊ∑ªÂä†‰Ω†ÁöÑÂæÆ‰ø°Âπ∂Êãâ‰Ω†ËøõÁæ§ÔºàÂ°´ÂÜô‰∏çËÆ§ÁúüÁöÑÂ∞ÜËá™Âä®ÂøΩÁï•ÂìàÔºâ„ÄÇ\n","categories":"","description":"Ê¨¢ËøéÂèÇÂä† HttpRunner Áî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑Ôºå‰Ω†ÁöÑÂèçÈ¶àÂ∞ÜÂ∏ÆÂä© HttpRunner Êõ¥Â•ΩÂú∞ÊàêÈïøÔºÅ","excerpt":"Ê¨¢ËøéÂèÇÂä† HttpRunner Áî®Êà∑Ë∞ÉÁ†îÈóÆÂç∑Ôºå‰Ω†ÁöÑÂèçÈ¶àÂ∞ÜÂ∏ÆÂä© HttpRunner Êõ¥Â•ΩÂú∞ÊàêÈïøÔºÅ","ref":"/blog/user-survey/","tags":"","title":"HttpRunner Ê†∏ÂøÉÁî®Êà∑ÊãõÂãü‰∏≠Ôºå‰Ω†Ë¶ÅÂä†Áæ§‰πàÔºü"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"  #td-cover-block-0 { background-image: url(/en/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/en/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_1920x1080_fill_q75_catmullrom_top.jpg); } }  One-stop solution for HTTP(S) testing. Getting Started   Download   API test / Load Test / DevOps / APM / DEM\n         Key Features\n      Protocols Fully support HTTP/1.1 requests. HTTP/2, TCP, RPC, WebSocket and more protocols are coming soon.\n    Multiple Formats Write test cases in YAML/JSON/Golang/Python format, and they are interchangeable.\n    Record \u0026 Generate Generate test cases with HAR, Postman and Swagger. Smart reminder helps you write Golang/Python test cases easily.\n    Complex Scenarios Supports variables/extract/validate/hooks mechanisms to create extremely complex test scenarios.\n    Load Test No extra work is required when you want to run load tests. Supports 10,000+ QPS on one single machine, unlimited with distribution mode.\n    CLI / library Download binary file and use it as a CLI tool. You can also import as a library in your Golang/Python projects.\n    Open Source Open source under Apache-2.0 license.\n    Plugins Built-in rich functions, and you can also integrate custom functions with ease.\n    High Scalability Develop API/Load test service have never been easier.\n      Commercial Support\n      Expert Service Provide technical training \u0026 supporting.\n Read more ‚Ä¶\n   SaaS Provide full featured test services built on HttpRunner.\n Read more ‚Ä¶\n   Privatization deployment Deploy SaaS service in privatization.\n Read more ‚Ä¶\n   Customized development Develop customized features or plugins for your own needs.\n    Global environment Schedule your test cases to run on 5000+ edge devices worldwide, obtain real network link performance data.\n Read more ‚Ä¶\n   Intelligent analysis Analyze your test results with advanced analysis tools.\n Read more ‚Ä¶\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/en/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { ‚Ä¶","ref":"/en/","tags":"","title":"HttpRunner"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_1920x1080_fill_q75_catmullrom_top.jpg); } }  HTTP(S) ‰∏ÄÁ´ôÂºèÊµãËØïËß£ÂÜ≥ÊñπÊ°à ÂºÄÂßã‰ΩøÁî®   ‰∏ãËΩΩ   Êé•Âè£ÊµãËØï / ÂéãÂäõÊµãËØï / DevOps / Êï∞Â≠ó‰ΩìÈ™åÁõëÊµã\n         Ê†∏ÂøÉÁâπÊÄß\n      ÁΩëÁªúÂçèËÆÆ ÂÆåÊï¥ÊîØÊåÅ HTTP/1.1ÔºåÂêéÁª≠Â∞Ü‰ºöÊîØÊåÅ HTTP/2, TCP, RPC, WebSocket Á≠âÊõ¥Â§öÂçèËÆÆ\n    Â§öÊ†ºÂºèÂèØÈÄâ ÊµãËØïÁî®‰æãÊîØÊåÅ‰ΩøÁî® YAML/JSON/Golang/Python Ê†ºÂºèÔºåÂπ∂‰∏îÂÆÉ‰ª¨ÂèØ‰∫íÁõ∏ËΩ¨Êç¢\n    ÂΩïÂà∂ \u0026 ÁîüÊàê ÂèØ‰ΩøÁî® HAR/Postman/Swagger ÁîüÊàêÊµãËØïÁî®‰æãÔºõÂü∫‰∫éÈìæÂºèË∞ÉÁî®ÁöÑÊñπÊ≥ïÊèêÁ§∫‰πüÂèØÂø´ÈÄüÁºñÂÜôÊµãËØïÁî®‰æã\n    Â§çÊùÇÂú∫ÊôØ Âü∫‰∫é variables/extract/validate/hooks Êú∫Âà∂ÂèØ‰ª•Êñπ‰æøÂú∞ÂàõÂª∫‰ªªÊÑèÂ§çÊùÇÁöÑÊµãËØïÂú∫ÊôØ\n    ÂéãÂäõÊµãËØï Êó†ÈúÄÈ¢ùÂ§ñÂ∑•‰ΩúÂç≥ÂèØÂÆûÁé∞ÂéãÂäõÊµãËØïÔºõÂçïÊú∫ÂèØËΩªÊùæÊîØÊíë 1w+ QPSÔºåÁªìÂêàÂàÜÂ∏ÉÂºèË¥üËΩΩËÉΩÂäõÂèØÂÆûÁé∞Êµ∑ÈáèÂèëÂéã\n    ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ / Â∫ìÂáΩÊï∞ ÂêåÊó∂ÊîØÊåÅ‰∫åËøõÂà∂ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑Âíå Golang/Python Â∫ìÂáΩÊï∞ÂºïÁî®‰∏§Áßç‰ΩøÁî®ÊñπÂºè\n    ÂºÄÊ∫êÂÖçË¥π ÈááÁî®ÂºÄÊ∫êÂçèËÆÆ Apache-2.0ÔºåÂÖçË¥π‰ΩøÁî®Êó†‰ªª‰ΩïÈôêÂà∂\n    Êèí‰ª∂ÂåñÊú∫Âà∂ ÂÜÖÁΩÆ‰∏∞ÂØåÁöÑÂáΩÊï∞Â∫ìÔºåÂêåÊó∂ÂèØ‰ª•Âü∫‰∫éËá™ÂÆö‰πâÊèí‰ª∂ËΩªÊùæÂÆûÁé∞Êõ¥Â§öËÉΩÂäõ\n    È´òÂ∫¶ÂèØÊâ©Â±ïÊÄß ÊîØÊåÅ‰∫åÊ¨°ÂºÄÂèëÔºåÂèØËΩªÊùæÂÆûÁé∞Êé•Âè£ÊµãËØï„ÄÅÂéãÂäõÊµãËØïÁ≠âÂ∑•ÂÖ∑Âπ≥Âè∞\n      ÂïÜ‰∏öÂåñÊîØÊåÅ\n      ÂÖ®ÁêÉ‰ΩìÈ™åÁõëÊµã ÁúüÂÆûËÆæÂ§áÁúüÂÆû‚ΩπÁªú„ÄÅ‚æÉÂä®Ê®°Êãü‚Ω§‚ºæ‚æè‰∏∫„ÄÅÈááÈõÜ‰ΩìÈ™åÊï∞ÊçÆ„ÄÅÂèëÁé∞‰ΩìÈ™åÈóÆÈ¢ò„ÄÅÊô∫ËÉΩÂΩíÂõ†ÂàÜÊûê\n Êõ¥Â§ö ‚Ä¶\n   ÂÖ®ÁêÉËàÜÊÉÖÁõëÊµã Êµ∑ÈáèÂ§öËØ≠‚æîÊï∞ÊçÆÊåñÊéò„ÄÅAI+Âú∞ÂüüÂåñËßÑÂàô„ÄÅËàÜÊÉÖÁõëÊµãÂáÜÁ°ÆÂÆûÊó∂\n Êõ¥Â§ö ‚Ä¶\n   ÂÖ®ÁêÉÁúüÊú∫Áßü‚Ω§ ÂºÄÊîæÂÖ®ÁêÉ 100+ ‚ΩπÁªúËäÇÁÇπ„ÄÅË∂ÖËøá 500 Âè∞‚ºøÊú∫/PC/iPad„ÄÅÊú¨Âú∞ WiFi/3G/4G/5G ‚ΩπÁªú„ÄÅËøúÁ®ã‰∫ëÁ´ØÁõ¥Êé•Áßü‚Ω§\n Êõ¥Â§ö ‚Ä¶\n   ÂÆâÂÖ®ÂêàËßÑÁõëÊµã Êµ∑ÈáèÁúüÂÆûËÆæÂ§áÁúüÂÆû‚ΩπÁªúËäÇÁÇπ„ÄÅ‰∏∞ÂØåÁöÑÂú∞ÂüüÂåñÂÆâÂÖ®ËßÑÂàô„ÄÅGDPR Á≠âÂÆâÂÖ®ÂêàËßÑ‰øùÈöú\n Êõ¥Â§ö ‚Ä¶\n   ‰∏ìÂÆ∂ÊúçÂä° Êèê‰æõÊäÄÊúØÂüπËÆ≠ÂíåÊäÄÊúØÊîØÊåÅ\n Êõ¥Â§ö ‚Ä¶\n   SaaS ÊúçÂä° Êèê‰æõÂü∫‰∫é HttpRunner ÊûÑÂª∫ÁöÑÂÖ®ÂäüËÉΩÊµãËØïÊúçÂä°\n Êõ¥Â§ö ‚Ä¶\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/featured-background_hu854e4ee64c461d4d9e0cb3295bb3ad16_582821_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { ‚Ä¶","ref":"/","tags":"","title":"HttpRunner"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/en/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","ref":"/blog/","tags":"","title":"ÂçöÂÆ¢"},{"body":"","categories":"","description":"","excerpt":"","ref":"/community/","tags":"","title":"Á§æÂå∫"}]