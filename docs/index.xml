<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HttpRunner – 欢迎使用 HttpRunner+</title><link>https://httprunner.github.io/docs/</link><description>Recent content in 欢迎使用 HttpRunner+ on HttpRunner</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://httprunner.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 全球数字体验监测平台</title><link>https://httprunner.github.io/docs/services/dem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/services/dem/</guid><description>
&lt;h2 id="什么是数字体验监测dem">什么是数字体验监测（DEM）&lt;/h2>
&lt;p>利⽤分布在全球各地的&lt;code>真实设备&lt;/code>和&lt;code>真实⽹络&lt;/code>，模拟⽤⼾的&lt;code>真实⾏为&lt;/code>，采集体验相关数据，提供&lt;code>体验问题发现&lt;/code>、&lt;code>智能归因&lt;/code>及&lt;code>报警&lt;/code>服务。&lt;/p>
&lt;p>具体能⼒包括：&lt;/p>
&lt;ul>
&lt;li>接⼝拨测&lt;/li>
&lt;li>流媒体拨测&lt;/li>
&lt;li>⽹络拨测&lt;/li>
&lt;li>H5 拨测&lt;/li>
&lt;li>CDN 效果评测&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://httprunner.github.io/image/DEM.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>Gartner有关数字体验的预测：&lt;/p>
&lt;p>“到 2023 年，60% 的数字业务创新需要通过基础设施和智能运维来报告⽤⼾的数字体验，⽽⽬前这种体验在基础设施和智能运维上的实现率还不到 15%。”&lt;/p>
&lt;/blockquote>
&lt;h2 id="核服务">核⼼服务&lt;/h2>
&lt;ul>
&lt;li>全球体验监测：真实设备真实⽹络、⾃动模拟⽤⼾⾏为、采集体验数据、发现体验问题、智能归因分析&lt;/li>
&lt;li>全球舆情监测：海量多语⾔数据挖掘、AI+地域化规则、舆情监测准确实时&lt;/li>
&lt;li>全球真机租⽤：开放全球 100+ ⽹络节点、超过 500 台⼿机/PC/iPad、本地 WiFi/3G/4G/5G ⽹络、远程云端直接租⽤&lt;/li>
&lt;li>安全合规监测：海量真实设备真实⽹络节点、丰富的地域化安全规则、GDPR 等安全合规保障&lt;/li>
&lt;/ul>
&lt;h2 id="我们的优势">我们的优势&lt;/h2>
&lt;h3 id="全球布局全球服务">全球布局、全球服务&lt;/h3>
&lt;ul>
&lt;li>全球基础设施：布局全球多个地理区域，服务覆盖亚太、⾮洲、拉美、中东等区域&lt;/li>
&lt;li>服务 50+ 个国家：服务全球 50 多个国家，150+ 地区&lt;/li>
&lt;li>100+ 当地合作伙伴：多语⾔、当地认证实验室、当地资源&lt;/li>
&lt;/ul>
&lt;h3 id="全球监测节点部署">全球监测节点部署&lt;/h3>
&lt;ul>
&lt;li>全球设备机柜：3,000+&lt;/li>
&lt;li>全球⽹络节点：2,000+&lt;/li>
&lt;li>海外覆盖城市：110+&lt;/li>
&lt;li>国内覆盖城市：40+&lt;/li>
&lt;/ul>
&lt;h2 id="应用场景">应用场景&lt;/h2>
&lt;blockquote>
&lt;p>关键词：非侵入式、自动化、深度学习&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>App：安装下载优化、安全合规准⼊、个⼈隐私保护&lt;/li>
&lt;li>游戏：当地⽹速监测、当地⽀付习惯、舆情体验分析&lt;/li>
&lt;li>网站：当地⽹络性能、⽹站本地体验、对标苹果⽹站&lt;/li>
&lt;li>社交娱乐：⾳频质量评测、视频质量评测、舆情数据分析&lt;/li>
&lt;/ul>
&lt;h2 id="成功案例">成功案例&lt;/h2>
&lt;h3 id="某头部大厂全球化短视频监测">某头部大厂：全球化短视频监测&lt;/h3>
&lt;p>背景：某头部全球化短视频产品在某些地区进⾏激进的拉新和投放之后，核⼼指标趋于稳定，希望从客⼾端体验、播放体验、安全合规和⽹络性能等多个维度优化⽤⼾体验，从⽽进⼀步提升核⼼业务指标。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>通过在⽬标地区的设备（真实设备，真实地理位置，真实当地运营商）上发起探测任务，给出产品核⼼域名的访问情况和资源请求性能情况，并针对⽹络性能问题给出优化建议。&lt;/li>
&lt;li>为产品提供特定地区的真实设备、真实⽹络环境，还原真实⽤⼾使⽤场景，使得客⼾更容易定位终端⽤⼾体验问题。&lt;/li>
&lt;li>针对包⼤⼩和客⼾端性能等维度对客⼾端进⾏测试，发现安装包不合理资源、全局异常刷新、⻚⾯过度重绘等问题，提供优化建议，帮助产品性能⼤幅提升。&lt;/li>
&lt;li>针对不同地区的安全合规规则，对产品进⾏动态、静态安全分析，定位了多个安全问题，保证产品在投放地区不存在安全合规⻛险。&lt;/li>
&lt;/ul>
&lt;p>价值收益：通过数字体验监测平台发现问题并智能归因，范围涉及⽹络、播放、客⼾端性能等多个⽅⾯，最终&lt;code>帮助客⼾留存类指标提升了 30%&lt;/code>。&lt;/p>
&lt;h3 id="某头部大厂出海游戏体验测试">某头部大厂：出海游戏体验测试&lt;/h3>
&lt;p>背景：某头部出海游戏在海外投放后，有几个国家的数据表现一直不理想，所以希望利用我们的出海能力，帮助他们发现数据不理想的原因，提升关键业务指标。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>通过在多个投放国家进⾏语⾔⽂化、设备⽹路、⽤⼾习惯的本地化评测，发现了产品存在的多个本地化问题（例如当地游戏⽹络延迟⾼、未翻译等），保证当地玩家的游戏体验。&lt;/li>
&lt;li>针对游戏收⼊不符合预期的问题，利⽤当地主流⽹络环境及各主要⽅式在不同场景下的真实⽀付验证，发现了⽀付耗时⻓，失败率⾼等多个问题，增加了游戏收⼊。&lt;/li>
&lt;li>针对海外活动效果差的情况，在活动上线前由本地测试专家提供体验评估测试，降低了时区、当地使⽤习惯、本地⼝⾳兼容等多个问题，提升了活动效果。&lt;/li>
&lt;li>海外本⼟信息因为语⾔、⽂化等差异导致收集⼗分困难，通过海外专家语⾔及⽂化的本地优势来进⾏舆情信息收集，发现了多例海外⿊产及虚拟账号问题，保障了产品的安全，为业务决策提供了⽀持。&lt;/li>
&lt;/ul>
&lt;p>价值收益：通过数字体验监测平台进⾏本地化体验评测及落地优化建议，最终帮助客⼾在多个投放效果差的国家，&lt;code>平均提升了 40% 的⽇均流⽔&lt;/code>。&lt;/p>
&lt;h2 id="联系方式">联系方式&lt;/h2>
&lt;p>E-mail: &lt;a href="mailto:lilong.129@bytedance.com">lilong.129@bytedance.com&lt;/a>&lt;/p></description></item><item><title>Docs: 整体概览</title><link>https://httprunner.github.io/docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/overview/</guid><description>
&lt;p>&lt;a href="https://pkg.go.dev/github.com/httprunner/hrp">&lt;img src="https://pkg.go.dev/badge/github.com/httprunner/hrp.svg" alt="Go Reference">&lt;/a>
&lt;a href="https://github.com/httprunner/hrp/actions">&lt;img src="https://github.com/httprunner/hrp/actions/workflows/unittest.yml/badge.svg" alt="Github Actions">&lt;/a>
&lt;a href="https://codecov.io/gh/httprunner/hrp">&lt;img src="https://codecov.io/gh/httprunner/hrp/branch/main/graph/badge.svg?token=HPCQWCD7KO" alt="codecov">&lt;/a>
&lt;a href="https://goreportcard.com/report/github.com/httprunner/hrp">&lt;img src="https://goreportcard.com/badge/github.com/httprunner/hrp" alt="Go Report Card">&lt;/a>
&lt;a href="https://app.fossa.com/reports/c2742455-c8ab-4b13-8fd7-4a35ba0b2840">&lt;img src="https://app.fossa.com/api/projects/custom%2B27856%2Fgithub.com%2Fhttprunner%2Fhrp.svg?type=shield" alt="FOSSA Status">&lt;/a>&lt;/p>
&lt;p>&lt;code>hrp&lt;/code> is a golang implementation of &lt;a href="https://github.com/httprunner/httprunner">HttpRunner&lt;/a>. Ideally, hrp will be fully compatible with HttpRunner, including testcase format and usage. What&amp;rsquo;s more, hrp will integrate Boomer natively to be a better load generator for &lt;a href="https://github.com/locustio/locust">locust&lt;/a>.&lt;/p>
&lt;h2 id="key-features">Key Features&lt;/h2>
&lt;p>&lt;img src="https://httprunner.github.io/image/flow.jpg" alt="flow chart">&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Full support for HTTP(S) requests, more protocols are also in the plan.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Testcases can be described in multiple formats, &lt;code>YAML&lt;/code>/&lt;code>JSON&lt;/code>/&lt;code>Golang&lt;/code>, and they are interchangeable.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> With &lt;a href="http://httparchive.org/">&lt;code>HAR&lt;/code>&lt;/a> support, you can use Charles/Fiddler/Chrome/etc as a script recording generator.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Supports &lt;code>variables&lt;/code>/&lt;code>extract&lt;/code>/&lt;code>validate&lt;/code>/&lt;code>hooks&lt;/code> mechanisms to create extremely complex test scenarios.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Built-in integration of rich functions, and you can also use &lt;a href="https://pkg.go.dev/plugin">&lt;code>go plugin&lt;/code>&lt;/a> to create and call custom functions.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Inherit all powerful features of &lt;a href="https://github.com/myzhan/boomer">&lt;code>Boomer&lt;/code>&lt;/a> and &lt;a href="https://github.com/locustio/locust">&lt;code>locust&lt;/code>&lt;/a>, you can run &lt;code>load test&lt;/code> without extra work.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Use it as a &lt;code>CLI tool&lt;/code> or as a &lt;code>library&lt;/code> are both supported.&lt;/li>
&lt;/ul>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h3 id="use-as-cli-tool">use as CLI tool&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/httprunner/hrp/hrp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since installed, you will get a &lt;code>hrp&lt;/code> command with multiple sub-commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hrp -h
hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ✨ 🚀 ✨
License: Apache-2.0
Github: https://github.com/httprunner/hrp
Copyright 2021 debugtalk
Usage:
hrp [command]
Available Commands:
boom run load test with boomer
completion generate the autocompletion script for the specified shell
har2case Convert HAR to json/yaml testcase files
help Help about any command
run run API test
Flags:
-h, --help help for hrp
--log-json set log to json format
-l, --log-level string set log level (default &amp;#34;INFO&amp;#34;)
-v, --version version for hrp
Use &amp;#34;hrp [command] --help&amp;#34; for more information about a command.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use &lt;code>hrp run&lt;/code> command to run HttpRunner JSON/YAML testcases. The following is an example running &lt;a href="https://github.com/httprunner/hrp/blob/main/examples/demo.json">examples/demo.json&lt;/a>&lt;/p>
&lt;details>
&lt;summary>$ hrp run examples/demo.json&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">8:04PM INF Set log to pretty console
8:04PM INF Set log level to INFO
8:04PM INF [init] SetDebug debug=true
8:04PM INF load json testcase path=/Users/debugtalk/MyProjects/HttpRunner-dev/hrp/examples/demo.json
8:04PM INF call function success arguments=[5] funcName=gen_random_string output=B64R8
8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3
8:04PM INF run testcase start testcase=&amp;#34;demo with complex mechanisms&amp;#34;
8:04PM INF call function success arguments=[12.3,34.5] funcName=max output=34.5
8:04PM INF run step start step=&amp;#34;get with params&amp;#34;
-------------------- request --------------------
GET /get?foo1=B64R8&amp;amp;foo2=34.5 HTTP/1.1
Host: postman-echo.com
User-Agent: HttpRunnerPlus
==================== response ===================
HTTP/1.1 200 OK
Content-Length: 304
Connection: keep-alive
Content-Type: application/json; charset=utf-8
Date: Thu, 11 Nov 2021 12:04:32 GMT
Etag: W/&amp;#34;130-LUQ0LVU7KVSZha0O3nQxqPlr5dw&amp;#34;
Set-Cookie: sails.sid=s%3Ag6vZXrHHzs-B7Q1bFrYQq83dUje_EkSu.06vsqbkZvIOJ6mb1It7c6i354e%2B0t91K4cG14YFjSX0; Path=/; HttpOnly
Vary: Accept-Encoding
{&amp;#34;args&amp;#34;:{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:&amp;#34;34.5&amp;#34;},&amp;#34;headers&amp;#34;:{&amp;#34;x-forwarded-proto&amp;#34;:&amp;#34;https&amp;#34;,&amp;#34;x-forwarded-port&amp;#34;:&amp;#34;443&amp;#34;,&amp;#34;host&amp;#34;:&amp;#34;postman-echo.com&amp;#34;,&amp;#34;x-amzn-trace-id&amp;#34;:&amp;#34;Root=1-618d06d0-7516144f65e561a8238adab5&amp;#34;,&amp;#34;user-agent&amp;#34;:&amp;#34;HttpRunnerPlus&amp;#34;,&amp;#34;accept-encoding&amp;#34;:&amp;#34;gzip&amp;#34;},&amp;#34;url&amp;#34;:&amp;#34;https://postman-echo.com/get?foo1=B64R8&amp;amp;foo2=34.5&amp;#34;}
--------------------------------------------------
8:04PM INF extract value from=body.args.foo1 value=B64R8
8:04PM INF set variable value=B64R8 variable=varFoo1
8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true
8:04PM INF validate headers.&amp;#34;Content-Type&amp;#34; assertMethod=startswith checkValue=&amp;#34;application/json; charset=utf-8&amp;#34; expectValue=application/json result=true
8:04PM INF validate body.args.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true
8:04PM INF validate $varFoo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true
8:04PM INF validate body.args.foo2 assertMethod=equals checkValue=34.5 expectValue=34.5 result=true
8:04PM INF run step end exportVars={&amp;#34;varFoo1&amp;#34;:&amp;#34;B64R8&amp;#34;} step=&amp;#34;get with params&amp;#34; success=true
8:04PM INF run step start step=&amp;#34;post json data&amp;#34;
8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3
-------------------- request --------------------
POST /post HTTP/1.1
Host: postman-echo.com
Content-Type: application/json; charset=UTF-8
{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:12.3}
==================== response ===================
HTTP/1.1 200 OK
Content-Length: 424
Connection: keep-alive
Content-Type: application/json; charset=utf-8
Date: Thu, 11 Nov 2021 12:04:32 GMT
Etag: W/&amp;#34;1a8-1umvYElau4WkHR7VON+jKXozT2c&amp;#34;
Set-Cookie: sails.sid=s%3AeNnS5IE6TBePzx95OfuwyIweJy5aExb0.7MH6Vb42vbZ6OhNT2nhQGcAmHgqcFmtM8X03Qsoxa1k; Path=/; HttpOnly
Vary: Accept-Encoding
{&amp;#34;args&amp;#34;:{},&amp;#34;data&amp;#34;:{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:12.3},&amp;#34;files&amp;#34;:{},&amp;#34;form&amp;#34;:{},&amp;#34;headers&amp;#34;:{&amp;#34;x-forwarded-proto&amp;#34;:&amp;#34;https&amp;#34;,&amp;#34;x-forwarded-port&amp;#34;:&amp;#34;443&amp;#34;,&amp;#34;host&amp;#34;:&amp;#34;postman-echo.com&amp;#34;,&amp;#34;x-amzn-trace-id&amp;#34;:&amp;#34;Root=1-618d06d0-360475ad34903a97191978d7&amp;#34;,&amp;#34;content-length&amp;#34;:&amp;#34;28&amp;#34;,&amp;#34;user-agent&amp;#34;:&amp;#34;Go-http-client/1.1&amp;#34;,&amp;#34;content-type&amp;#34;:&amp;#34;application/json; charset=UTF-8&amp;#34;,&amp;#34;accept-encoding&amp;#34;:&amp;#34;gzip&amp;#34;},&amp;#34;json&amp;#34;:{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:12.3},&amp;#34;url&amp;#34;:&amp;#34;https://postman-echo.com/post&amp;#34;}
--------------------------------------------------
8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true
8:04PM INF validate body.json.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true
8:04PM INF validate body.json.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true
8:04PM INF run step end exportVars=null step=&amp;#34;post json data&amp;#34; success=true
8:04PM INF run step start step=&amp;#34;post form data&amp;#34;
8:04PM INF call function success arguments=[12.3,3.45] funcName=max output=12.3
-------------------- request --------------------
POST /post HTTP/1.1
Host: postman-echo.com
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
foo1=B64R8&amp;amp;foo2=12.3
==================== response ===================
HTTP/1.1 200 OK
Content-Length: 445
Connection: keep-alive
Content-Type: application/json; charset=utf-8
Date: Thu, 11 Nov 2021 12:04:32 GMT
Etag: W/&amp;#34;1bd-g/z+op+J2/U1DlrEv2g2VhZ0on4&amp;#34;
Set-Cookie: sails.sid=s%3ALfq9XEgKVT4dKQ8PnxUJ9-WSq4wI96Po.2P90TP9V2Pje3GNJ1hJmLcRRgcQy%2FDwBPF63Xdvdq4o; Path=/; HttpOnly
Vary: Accept-Encoding
{&amp;#34;args&amp;#34;:{},&amp;#34;data&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;files&amp;#34;:{},&amp;#34;form&amp;#34;:{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:&amp;#34;12.3&amp;#34;},&amp;#34;headers&amp;#34;:{&amp;#34;x-forwarded-proto&amp;#34;:&amp;#34;https&amp;#34;,&amp;#34;x-forwarded-port&amp;#34;:&amp;#34;443&amp;#34;,&amp;#34;host&amp;#34;:&amp;#34;postman-echo.com&amp;#34;,&amp;#34;x-amzn-trace-id&amp;#34;:&amp;#34;Root=1-618d06d0-56d250242bf05b7144edf2cb&amp;#34;,&amp;#34;content-length&amp;#34;:&amp;#34;20&amp;#34;,&amp;#34;user-agent&amp;#34;:&amp;#34;Go-http-client/1.1&amp;#34;,&amp;#34;content-type&amp;#34;:&amp;#34;application/x-www-form-urlencoded; charset=UTF-8&amp;#34;,&amp;#34;accept-encoding&amp;#34;:&amp;#34;gzip&amp;#34;},&amp;#34;json&amp;#34;:{&amp;#34;foo1&amp;#34;:&amp;#34;B64R8&amp;#34;,&amp;#34;foo2&amp;#34;:&amp;#34;12.3&amp;#34;},&amp;#34;url&amp;#34;:&amp;#34;https://postman-echo.com/post&amp;#34;}
--------------------------------------------------
8:04PM INF validate status_code assertMethod=equals checkValue=200 expectValue=200 result=true
8:04PM INF validate body.form.foo1 assertMethod=length_equals checkValue=B64R8 expectValue=5 result=true
8:04PM INF validate body.form.foo2 assertMethod=equals checkValue=12.3 expectValue=12.3 result=true
8:04PM INF run step end exportVars=null step=&amp;#34;post form data&amp;#34; success=true
8:04PM INF run testcase end testcase=&amp;#34;demo with complex mechanisms&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h3 id="use-as-library">use as library&lt;/h3>
&lt;p>Beside using &lt;code>hrp&lt;/code> as a CLI tool, you can also use it as golang library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/httprunner/hrp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is an example of &lt;code>HttpRunner+&lt;/code> testcase. You can find more in the &lt;a href="https://github.com/httprunner/hrp/blob/main/examples/">&lt;code>examples&lt;/code>&lt;/a> directory.&lt;/p>
&lt;details>
&lt;summary>demo&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;testing&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;github.com/httprunner/hrp&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">TestCaseDemo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">demoTestCase&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TestCase&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;demo with complex mechanisms&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">BaseURL&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;https://postman-echo.com&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Variables&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// global level variables
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12.3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;b&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.45&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;${gen_random_string($n)}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;varFoo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;${max($a, $b)}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 12.3; eval with built-in function
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000">TestSteps&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStep&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Step&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;get with params&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">WithVariables&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// step level variables
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// inherit config level variables if not set in step level, a/varFoo1
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;b&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">34.5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// override config level variable if existed, n/b/varFoo2
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;varFoo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;${max($a, $b)}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 34.5; override variable b and eval again
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>
&lt;span style="color:#000">GET&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">WithParams&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;$varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;$varFoo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// request with params
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">WithHeaders&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;User-Agent&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;HttpRunnerPlus&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// request with headers
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Extract&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>
&lt;span style="color:#000">WithJmesPath&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.args.foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// extract variable with jmespath
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Validate&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>
&lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;status_code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check response status code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// validate response status code
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AssertStartsWith&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;headers.\&amp;#34;Content-Type\&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// validate response header
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AssertLengthEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.args.foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// validate response body with jmespath
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AssertLengthEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;$varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// assert with extracted variable from current step
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.args.foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;34.5&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// notice: request params value will be converted to string
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Step&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;post json data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">POST&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/post&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">WithBody&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;$varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// reference former extracted variable
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;${max($a, $b)}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 12.3; step level variables are independent, variable b is 3.45 here
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>
&lt;span style="color:#000">Validate&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>
&lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;status_code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check status code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">AssertLengthEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.json.foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.json.foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">12.3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Step&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;post form data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">POST&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/post&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">WithHeaders&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;application/x-www-form-urlencoded; charset=UTF-8&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}).&lt;/span>
&lt;span style="color:#000">WithBody&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;$varFoo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// reference former extracted variable
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;${max($a, $b)}&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 12.3; step level variables are independent, variable b is 3.45 here
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}).&lt;/span>
&lt;span style="color:#000">Validate&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>
&lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;status_code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check status code&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">AssertLengthEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.form.foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>
&lt;span style="color:#000">AssertEqual&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;body.form.foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;12.3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;check args foo2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// form data will be converted to string
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">hrp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewRunner&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">Run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">demoTestCase&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// hrp.Run(demoTestCase)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatalf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;run testcase error: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/details></description></item><item><title>Docs: 全球数字体验咨询服务</title><link>https://httprunner.github.io/docs/services/consultation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/services/consultation/</guid><description>
&lt;p>&lt;img src="https://httprunner.github.io/image/DEM_consultation.png" alt="">&lt;/p></description></item><item><title>Docs: 安装说明</title><link>https://httprunner.github.io/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/installation/</guid><description>
&lt;p>&lt;code>HttpRunner+&lt;/code> is developed with Golang, it supports Go &lt;code>1.13+&lt;/code> and most operating systems. Combination of Go &lt;code>1.13/1.14/1.15/1.16/1.17&lt;/code> and &lt;code>macOS/Linux/Windows&lt;/code> are tested continuously on &lt;a href="https://github.com/httprunner/hrp/actions">GitHub-Actions&lt;/a>.&lt;/p>
&lt;h2 id="install-as-cli-tool">install as CLI tool&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/httprunner/hrp/hrp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since installed, you will get a &lt;code>hrp&lt;/code> command with multiple sub-commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hrp -h
hrp (HttpRunner+) is the next generation for HttpRunner. Enjoy! ✨ 🚀 ✨
License: Apache-2.0
Github: https://github.com/httprunner/hrp
Copyright 2021 debugtalk
Usage:
hrp [command]
Available Commands:
boom run load test with boomer
completion generate the autocompletion script for the specified shell
har2case Convert HAR to json/yaml testcase files
help Help about any command
run run API test
Flags:
-h, --help help for hrp
--log-json set log to json format
-l, --log-level string set log level (default &amp;#34;INFO&amp;#34;)
-v, --version version for hrp
Use &amp;#34;hrp [command] --help&amp;#34; for more information about a command.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-as-library">install as library&lt;/h2>
&lt;p>Beside using &lt;code>hrp&lt;/code> as a CLI tool, you can also use it as golang library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ go get -u github.com/httprunner/hrp
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you can import &lt;code>github.com/httprunner/hrp&lt;/code> and write testcases in Golang.&lt;/p></description></item><item><title>Docs: 快速上手</title><link>https://httprunner.github.io/docs/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/quickstart/</guid><description>
&lt;p>Information in this section helps your user try your project themselves.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>What do your users need to do to start using your project? This could include downloading/installation instructions, including any prerequisites or system requirements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Introductory “Hello World” example, if appropriate. More complex tutorials should live in the Tutorials section.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consider using the headings below for your getting started page. You can delete any that are not applicable to your project.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Is there any initial setup users need to do after installation to try your project?&lt;/p>
&lt;h2 id="try-it-out">Try it out!&lt;/h2>
&lt;p>Can your users test their installation, for example by running a command or deploying a Hello World example?&lt;/p></description></item><item><title>Docs: 压力测试</title><link>https://httprunner.github.io/docs/loadtest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/loadtest/</guid><description>
&lt;h2 id="start-with-cli">Start with CLI&lt;/h2>
&lt;p>&lt;code>HttpRunner+&lt;/code> supports running load test without extra work. You can use &lt;code>hrp boom&lt;/code> command to run YAML/JSON testcases in load testing mode.&lt;/p>
&lt;p>By default, hrp will print load testing results in console output, refreshed every 3 seconds.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1
6:09PM INF Set log to pretty console
6:09PM INF Set log level to INFO
6:09PM INF Set log level to WARN
2021/12/02 18:09:48 Spawning 10 clients immediately
Current time: 2021/12/02 18:09:51, Users: 10, Total RPS: 20, Total Fail Ratio: 0.0%
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| request-GET | get with params | 10 | 0 | 2400 | 2423.00 | 2422 | 2424 | 300 | 10 | 0 |
| request-POST | post json data | 10 | 0 | 310 | 304.50 | 301 | 307 | 420 | 10 | 0 |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
Current time: 2021/12/02 18:09:54, Users: 10, Total RPS: 16, Total Fail Ratio: 0.0%
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| request-GET | get with params | 18 | 0 | 1200 | 1157.39 | 1083 | 1367 | 300 | 9 | 0 |
| request-POST | post json data | 10 | 0 | 290 | 290.20 | 287 | 293 | 420 | 10 | 0 |
| request-POST | post form data | 20 | 0 | 310 | 300.00 | 287 | 311 | 441 | 10 | 0 |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
Current time: 2021/12/02 18:09:57, Users: 10, Total RPS: 17, Total Fail Ratio: 0.0%
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| TYPE | NAME | # REQUESTS | # FAILS | MEDIAN | AVERAGE | MIN | MAX | CONTENT SIZE | # REQS/SEC | # FAILS/SEC |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
| request-GET | get with params | 12 | 0 | 1100 | 1153.92 | 1081 | 1464 | 300 | 6 | 0 |
| request-POST | post json data | 20 | 0 | 270 | 279.70 | 269 | 337 | 420 | 6 | 0 |
| request-POST | post form data | 20 | 0 | 270 | 272.85 | 269 | 279 | 441 | 10 | 0 |
+--------------+-----------------+------------+---------+--------+---------+------+------+--------------+------------+-------------+
&lt;/code>&lt;/pre>&lt;p>If you want to disable console output, you can add a &lt;code>--disable-console-output&lt;/code> flag.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --disable-console-output
&lt;/code>&lt;/pre>&lt;p>You can reference this &lt;a href="cmd/hrp_boom.md">doc&lt;/a> for all command arguments.&lt;/p>
&lt;h2 id="report-metrics-to-prometheus-pushgateway">Report metrics to Prometheus Pushgateway&lt;/h2>
&lt;p>Besides printing load testing results in console, you can also push metrics to &lt;a href="https://github.com/prometheus/pushgateway">Prometheus Pushgateway&lt;/a>, and then you can configure pretty graphs on &lt;a href="https://grafana.com/">Grafana&lt;/a>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hrp boom examples/demo.json --spawn-count 10 --spawn-rate 1 --prometheus-gateway http://127.0.0.1:9091
&lt;/code>&lt;/pre>&lt;p>You can deploy the Pushgateway using the &lt;a href="https://hub.docker.com/r/prom/pushgateway">prom/pushgateway&lt;/a> Docker image at ease.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ docker pull prom/pushgateway
$ docker run -d -p 9091:9091 prom/pushgateway
&lt;/code>&lt;/pre></description></item><item><title>Docs: 核心概念</title><link>https://httprunner.github.io/docs/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/concepts/</guid><description>
&lt;h2 id="测试用例testcase">测试用例（TestCase）&lt;/h2>
&lt;p>从 2.0 版本开始，HttpRunner 开始对测试用例的定义进行进一步的明确，参考 &lt;a href="https://en.wikipedia.org/wiki/Test_case">wiki&lt;/a> 上的描述。&lt;/p>
&lt;blockquote>
&lt;p>A test case is a specification of the inputs, execution conditions, testing procedure, and expected results that define a single test to be executed to achieve a particular software testing objective, such as to exercise a particular program path or to verify compliance with a specific requirement.&lt;/p>
&lt;/blockquote>
&lt;p>概括下来，一条测试用例（testcase）应该是为了测试某个特定的功能逻辑而精心设计的，并且至少包含如下几点：&lt;/p>
&lt;ul>
&lt;li>明确的测试目的（achieve a particular software testing objective）&lt;/li>
&lt;li>明确的输入（inputs）&lt;/li>
&lt;li>明确的运行环境（execution conditions）&lt;/li>
&lt;li>明确的测试步骤描述（testing procedure）&lt;/li>
&lt;li>明确的预期结果（expected results）&lt;/li>
&lt;/ul>
&lt;p>对应地，HttpRunner 的测试用例描述方式进行如下设计：&lt;/p>
&lt;ul>
&lt;li>测试用例应该是完整且独立的，每条测试用例应该是都可以独立运行的；在 HttpRunner 中，每个 &lt;code>YAML/JSON&lt;/code> 文件对应一条测试用例。&lt;/li>
&lt;li>测试用例包含 &lt;code>测试脚本&lt;/code> 和 &lt;code>测试数据&lt;/code> 两部分：
&lt;ul>
&lt;li>&lt;code>测试用例 = 测试脚本 + 测试数据&lt;/code>&lt;/li>
&lt;li>&lt;code>测试脚本&lt;/code> 重点是描述测试的 &lt;code>业务功能逻辑&lt;/code>，包括预置条件、测试步骤、预期结果等，并且可以结合辅助函数（debugtalk.py）实现复杂的运算逻辑；可以将 &lt;code>测试脚本&lt;/code> 理解为编程语言中的 &lt;code>类（class）&lt;/code>；&lt;/li>
&lt;li>&lt;code>测试数据&lt;/code> 重点是对应测试的 &lt;code>业务数据逻辑&lt;/code>，可以理解为类的实例化数据；&lt;/li>
&lt;li>&lt;code>测试数据&lt;/code> 和 &lt;code>测试脚本&lt;/code> 分离后，就可以比较方便地实现数据驱动测试，通过对测试脚本传入一组数据，实现同一业务功能在不同数据逻辑下的测试验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="测试步骤teststep">测试步骤（TestStep）&lt;/h2>
&lt;p>测试用例是测试步骤的 &lt;code>有序&lt;/code> 集合，而对于接口测试来说，每一个测试步骤应该就对应一个 API 的请求描述。&lt;/p>
&lt;h2 id="测试用例集testsuite">测试用例集（TestSuite）&lt;/h2>
&lt;p>&lt;code>测试用例集&lt;/code> 是 &lt;code>测试用例&lt;/code> 的 &lt;code>无序&lt;/code> 集合，集合中的测试用例应该都是相互独立，不存在先后依赖关系的。&lt;/p>
&lt;p>如果确实存在先后依赖关系怎么办，例如登录功能和下单功能。正确的做法应该是，在下单测试用例的前置步骤中执行登录操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">order product&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">test&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">login&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">testcase&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">testcases/login.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">test&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">add to cart&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">api&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">api/add_cart.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">test&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">make order&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">api&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">api/make_order.yml&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="测试场景">测试场景&lt;/h2>
&lt;p>&lt;code>测试场景&lt;/code> 和 &lt;code>测试用例集&lt;/code> 是同一概念，都是 &lt;code>测试用例&lt;/code> 的 &lt;code>无序&lt;/code> 集合。&lt;/p>
&lt;ul>
&lt;li>接口&lt;/li>
&lt;li>测试用例集&lt;/li>
&lt;li>参数&lt;/li>
&lt;li>变量&lt;/li>
&lt;li>测试脚本（YAML/JSON）&lt;/li>
&lt;li>debugtalk.py&lt;/li>
&lt;li>环境变量&lt;/li>
&lt;/ul>
&lt;h2 id="项目根目录">项目根目录&lt;/h2>
&lt;h2 id="functions">functions&lt;/h2>
&lt;pre tabindex="0">&lt;code>&amp;quot;${func{$a, $b}}&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="variables">variables&lt;/h2>
&lt;p>&lt;code>$abc&lt;/code> or &lt;code>${abc}&lt;/code>&lt;/p>
&lt;h2 id="extract">extract&lt;/h2>
&lt;h2 id="validate">validate&lt;/h2></description></item><item><title>Docs: 赞助商</title><link>https://httprunner.github.io/docs/sponsors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://httprunner.github.io/docs/sponsors/</guid><description>
&lt;h3 id="金牌赞助商">金牌赞助商&lt;/h3>
&lt;p>&lt;a href="https://ceshiren.com/">&lt;img src="https://httprunner.github.io/image/hogwarts.jpeg" alt="霍格沃兹测试开发学社" width="400">&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://ceshiren.com">霍格沃兹测试开发学社&lt;/a>是业界领先的测试开发技术高端教育品牌，隶属于&lt;a href="http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://www.testing-studio.com">测吧（北京）科技有限公司&lt;/a> 。学院课程由一线大厂测试经理与资深测试开发专家参与研发，实战驱动。课程涵盖 web/app 自动化测试、接口测试、性能测试、安全测试、持续集成/持续交付/DevOps，测试左移&amp;amp;右移、精准测试、测试平台开发、测试管理等内容，帮助测试工程师实现测试开发技术转型。通过优秀的学社制度（奖学金、内推返学费、行业竞赛等多种方式）来实现学员、学社及用人企业的三方共赢。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a href="http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://ceshiren.com/t/topic/14940">进入测试开发技术能力测评!&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源赞助商">开源赞助商&lt;/h3>
&lt;p>&lt;a href="https://sentry.io/_/open-source/">&lt;img src="https://httprunner.github.io/image/sentry-logo-black.svg" alt="Sentry" width="150">&lt;/a>&lt;/p>
&lt;p>HttpRunner is in Sentry Sponsored plan.&lt;/p>
&lt;h2 id="成为赞助商">成为赞助商&lt;/h2>
&lt;p>如果你所在的公司或个人也想对 HttpRunner 进行赞助，可参考如下方案，具体可联系&lt;a href="mailto:debugtalk@gmail.com">项目作者&lt;/a>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">等级&lt;/th>
&lt;th style="text-align:center">金牌赞助商&lt;br/>（Gold Sponsor）&lt;/th>
&lt;th style="text-align:center">银牌赞助商&lt;br/>（Silver Sponsor）&lt;/th>
&lt;th style="text-align:center">个人赞赏&lt;br/>（Personal Sponsor）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">金额&lt;/td>
&lt;td style="text-align:center">￥20000/年&lt;/td>
&lt;td style="text-align:center">￥8000/年&lt;/td>
&lt;td style="text-align:center">￥10+ 任意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">权益&lt;/td>
&lt;td style="text-align:center">公司 logo（大）和链接展示在 README.md&lt;br/>200 字的宣传文案&lt;/td>
&lt;td style="text-align:center">公司 logo（中）和链接展示在 README.md&lt;br/>80 字的宣传文案&lt;/td>
&lt;td style="text-align:center">个人 ID 和链接展示在 sponsors.md&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>